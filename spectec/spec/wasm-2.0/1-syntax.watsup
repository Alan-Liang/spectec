;;
;; Names
;;

syntax char hint(desc "character") = U+0000 | ... | U+D7FF | U+E000 | ... | U+10FFFF

syntax name hint(desc "name") = char*

var nm : name


;;
;; Values
;;

;; Integers

syntax bit hint(desc "bit") = 0 | 1
syntax byte hint(desc "byte") = 0x00 | ... | 0xFF

syntax uN(N) hint(desc "unsigned integer") hint(show u#%) =
  0 | ... | 2^N-1
syntax sN(N) hint(desc "signed integer") hint(show s#%) =
  -2^(N-1) | ... | -1 | 0 | +1 | ... | 2^(N-1)-1
syntax iN(N) hint(desc "integer") hint(show i#%) =
  uN(N)

syntax u8 = uN(8)
syntax u31 = uN(31)
syntax u32 = uN(32)
syntax u64 = uN(64)
syntax u128 = uN(128)
syntax s33 = sN(33)

var b : byte


;; Floating-point

def $signif(N) : nat
def $signif(32) = 23
def $signif(64) = 52

def $expon(N) : nat
def $expon(32) = 8
def $expon(64) = 11

def $M(N) : nat  hint(show $M_(%))
def $M(N) = $signif(N)

def $E(N) : nat  hint(show $E_(%))
def $E(N) = $expon(N)

syntax fN(N) hint(desc "floating-point number") hint(show f#%) =
  | POS fmag(N)  hint(show $(+%))
  | NEG fmag(N)  hint(show $(-%))

syntax fmag(N) hint(desc "floating-point magnitude") hint(show f#%#mag) =
  | NORM m n     hint(show $((1 + %*2^(-$M(N))) * 2^%))  -- if $(2-2^($E(N)-1) <= n <= 2^($E(N)-1)-1)
  | SUBNORM m n  hint(show $((0 + %*2^(-$M(N))) * 2^%))  -- if $(2-2^($E(N)-1) = n)
  | INF          hint(show infinity)
  | NAN n        hint(show NAN#((%)))                    -- if $(1 <= n < $M(N))

def $fzero(N) : fN(N)  hint(show $(+0))
def $fzero(N) = POS (NORM 0 0)

syntax f32 = fN(32)
syntax f64 = fN(64)


;; Vectors

syntax vN(N) hint(desc "vector") hint(show v#%) =
  iN(N)


;;
;; Indices
;;

syntax idx hint(desc "index") = u32
syntax laneidx hint(desc "lane index") = u8

syntax typeidx hint(desc "type index") = idx
syntax funcidx hint(desc "function index") = idx
syntax globalidx hint(desc "global index") = idx
syntax tableidx hint(desc "table index") = idx
syntax memidx hint(desc "memory index") = idx
syntax elemidx hint(desc "elem index") = idx
syntax dataidx hint(desc "data index") = idx
syntax labelidx hint(desc "label index") = idx
syntax localidx hint(desc "local index") = idx

var x : idx
var y : idx
var l : labelidx
var x33 : s33 hint(show x)


;;
;; Types
;;

;; Value types

syntax numtype hint(desc "number type") =
  | I32 | I64 | F32 | F64

syntax vectype hint(desc "vector type") =
  | V128

syntax reftype hint(desc "reference type") =
  | FUNCREF | EXTERNREF

syntax valtype hint(desc "value type") =
  | numtype | vectype | reftype | BOT

syntax inn hint(show I#n) = | I32 | I64
syntax fnn hint(show F#n) = | F32 | F64
syntax vnn hint(show V#n) = | V128


syntax resulttype hint(desc "result type") =
  valtype*


;; Packed types

syntax packedtype = | I8 | I16

syntax imm hint(show I#n) = | I8 | I16 | I32 | I64


;; External types

syntax mut = MUT?

syntax limits hint(desc "limits") =
  `[u32 .. u32]

syntax globaltype hint(desc "global type") =
  mut valtype
syntax functype hint(desc "function type") =
  resulttype -> resulttype
syntax tabletype hint(desc "table type") =
  limits reftype
syntax memtype hint(desc "memory type") =
  limits I8
syntax elemtype hint(desc "element type") =
  reftype
syntax datatype hint(desc "data type") =
  OK
syntax externtype hint(desc "external type") =
  | FUNC functype | GLOBAL globaltype | TABLE tabletype | MEM memtype


;; Meta variables

var lim : limits

var t : valtype
var ft : functype
var gt : globaltype
var mt : memtype
var nt : numtype
var pt : packedtype
var rt : reftype
var tt : tabletype
var vt : vectype
var xt : externtype


;;
;; Operators
;;

;; Constants

def $size(valtype) : nat  hint(partial) hint(show |%|)

syntax const_(numtype)
syntax const_(inn) = iN($size(inn))
syntax const_(fnn) = fN($size(fnn))

syntax vconst_(vnn) = vN($size(vnn))


;; Numeric operators

syntax sx hint(desc "signedness") = | U | S

syntax unop_(numtype)
syntax unop_(inn) = | CLZ | CTZ | POPCNT
syntax unop_(fnn) = | ABS | NEG | SQRT | CEIL | FLOOR | TRUNC | NEAREST

syntax binop_(numtype)
syntax binop_(inn) =
  | ADD | SUB | MUL | DIV sx hint(show DIV_#%) | REM sx hint(show REM_#%)
  | AND | OR | XOR | SHL | SHR sx hint(show SHR_#%) | ROTL | ROTR
syntax binop_(fnn) =
  | ADD | SUB | MUL | DIV | MIN | MAX | COPYSIGN

syntax testop_(numtype)
syntax testop_(inn) = | EQZ
syntax testop_(fnn) = |      ;; uninhabited

syntax relop_(numtype)
syntax relop_(inn) =
  | EQ | NE
  | LT sx hint(show LT_#%) | GT sx hint(show GT_#%)
  | LE sx hint(show LE_#%) | GE sx hint(show GE_#%)
syntax relop_(fnn) =
  | EQ | NE | LT | GT | LE | GE

syntax cvtop = | CONVERT | REINTERPRET


;; Vector operators

syntax lanetype hint(desc "lane type") = | numtype | packedtype
syntax shape hint(desc "shape") = lanetype X nat

syntax vvunop = | NOT
syntax vvbinop = | AND | ANDNOT | OR | XOR
syntax vvternop = | BITSELECT
syntax vvtestop = | ANY_TRUE

syntax vunop_(shape)
syntax vunop_(imm X N) = | ABS | NEG
syntax vunop_(fnn X N) = | ABS | NEG | SQRT | CEIL | FLOOR | TRUNC | NEAREST

syntax vbinop_(shape)
syntax vbinop_(imm X N) = | ADD | SUB
syntax vbinop_(fnn X N) = | ADD | SUB | MUL | DIV | MIN | MAX | PMIN | PMAX

syntax vtestop_(shape)
syntax vtestop_(imm X N) = | ALL_TRUE
syntax vtestop_(fnn X N) = |           ;; uninhabited

syntax vrelop_(shape)
syntax vrelop_(imm X N) = | EQ | NE | LT sx | GT sx | LE sx | GE sx
syntax vrelop_(fnn X N) = | EQ | NE | LT | GT | LE | GE

syntax vcvtop = | EXTEND | TRUNC_SAT | CONVERT | DEMOTE | PROMOTE

syntax vlimop_(shape)
syntax vlimop_(imm X N) = | MIN sx | MAX sx
syntax vlimop_(fnn X N) = |                  ;; uninhabited

syntax vshiftop_(shape)
syntax vshiftop_(imm X N) = | SHL | SHR sx
syntax vshiftop_(fnn X N) = |                ;; uninhabited

;; TODO: merge with vbinop?
syntax vsatbinop_(shape)
syntax vsatbinop_(imm X N) = | ADD_SAT sx | SUB_SAT sx
syntax vsatbinop_(fnn X N) = |               ;; uninhabited


;; Memory operators

syntax memop hint(desc "memory operator") = {ALIGN u32, OFFSET u32}

var mo : memop


;;
;; Instructions
;;

syntax blocktype hint(desc "block type") =
  | _RESULT valtype?
  | _IDX funcidx

var bt : blocktype

syntax instr/control hint(desc "control instruction") =
  | UNREACHABLE
  | NOP
  | DROP
  | SELECT (valtype*)?
  | BLOCK blocktype instr*
  | LOOP blocktype instr*
  | IF blocktype instr* ELSE instr*
  | BR labelidx
  | BR_IF labelidx
  | BR_TABLE labelidx* labelidx
  | CALL funcidx
  | CALL_INDIRECT tableidx typeidx
  | RETURN
  | ...

syntax instr/numeric hint(desc "numeric instruction") = ...
  | CONST numtype const_(numtype)    hint(show %.CONST %)
  | UNOP numtype unop_(numtype)      hint(show %.%)
  | BINOP numtype binop_(numtype)    hint(show %.%)
  | TESTOP numtype testop_(numtype)  hint(show %.%)
  | RELOP numtype relop_(numtype)    hint(show %.%)
  | CVTOP numtype cvtop numtype sx?  hint(show %.%#_#%#_#%)
  | EXTEND numtype n                 hint(show %.EXTEND#%)
  | ...

syntax half hint(desc "lane part") = | LOW | HIGH
syntax zero = ZERO?

syntax instr/vector hint(desc "vector instruction") = ...
  | VCONST vectype vconst_(vectype)     hint(show %.CONST %)
  | VVUNOP vectype vvunop               hint(show %.%)
  | VVBINOP vectype vvbinop             hint(show %.%)
  | VVTERNOP vectype vvternop           hint(show %.%)
  | VVTESTOP vectype vvtestop           hint(show %.%)
  | VSWIZZLE shape                      hint(show %.SWIZZLE)
  | VSHUFFLE shape laneidx*             hint(show %.SHUFFLE %)
  | VSPLAT shape                        hint(show %.SPLAT)
  | VEXTRACT_LANE shape sx? laneidx     hint(show %.EXTRACT_LANE_#% %)
  | VREPLACE_LANE shape laneidx         hint(show %.REPLACE_LANE %)
  | VUNOP shape vunop_(shape)           hint(show %.%)
  | VBINOP shape vbinop_(shape)         hint(show %.%)
  | VTESTOP shape vtestop_(shape)       hint(show %.%)
  | VRELOP shape vrelop_(shape)         hint(show %.%)
  | VSHIFTOP shape vshiftop_(shape)     hint(show %.%)
  | VBITMASK shape                      hint(show %.BITMASK)
  | VCVTOP shape vcvtop half? shape sx? zero  hint(show %.%#_#%#_#%#_#%) hint(show %.%#_#%#_#%#_#%) hint(show %.%#_#%#_#%#_#%#_#%)
  | VNARROW shape shape sx              hint(show %.NARROW#_#%#_#%)
  | VEXTMUL shape half shape sx         hint(show %.EXTMUL#_#%#_#%#_#%)
  | VDOT shape shape sx                 hint(show %.DOT#_#%#_#%)
  | VEXTADD_PAIRWISE shape shape sx     hint(show %.EXTADD_PAIRWISE_#%#_#%)
  | ...

;; TODO: other ops? POPCNT, AVGR, Q15MULRSAT

syntax instr/reference hint(desc "reference instruction") = ...
  | REF.NULL reftype
  | REF.FUNC funcidx
  | REF.IS_NULL
  | ...

syntax instr/local hint(desc "local instruction") = ...
  | LOCAL.GET localidx
  | LOCAL.SET localidx
  | LOCAL.TEE localidx
  | ...

syntax instr/global hint(desc "global instruction") = ...
  | GLOBAL.GET globalidx
  | GLOBAL.SET globalidx
  | ...

syntax instr/table hint(desc "table instruction") = ...
  | TABLE.GET tableidx
  | TABLE.SET tableidx
  | TABLE.SIZE tableidx
  | TABLE.GROW tableidx
  | TABLE.FILL tableidx
  | TABLE.COPY tableidx tableidx
  | TABLE.INIT tableidx elemidx
  | ELEM.DROP elemidx
  | ...


syntax vloadop =
  | SHAPE nat X nat sx  hint(show %#X#%#_#%)
  | SPLAT nat           hint(show %#_#SPLAT)
  | ZERO nat            hint(show %#_#ZERO)

syntax instr/memory hint(desc "memory instruction") = ...
  | MEMORY.SIZE
  | MEMORY.GROW
  | MEMORY.FILL
  | MEMORY.COPY
  | MEMORY.INIT dataidx
  | DATA.DROP dataidx
  | LOAD numtype (n _ sx)? memop  hint(show %.LOAD % %)  hint(show %.LOAD#% %)
  | STORE numtype n? memop        hint(show %.STORE % %) hint(show %.STORE#% %)
  | VLOAD vloadop? memop          hint(show V128.LOAD %) hint(show V128.LOAD#% %)
  | VLOAD_LANE n memop laneidx    hint(show V128.LOAD#%#_#LANE % %)
  | VSTORE memop                  hint(show V128.STORE %)
  | VSTORE_LANE n memop laneidx   hint(show V128.STORE#%#_#LANE % %)

syntax expr hint(desc "expression") =
  instr*

syntax instr hint(desc "instruction")

var in : instr
var e : expr


;;
;; Modules
;;

syntax elemmode = | ACTIVE tableidx expr | PASSIVE | DECLARE
syntax datamode = | ACTIVE memidx expr | PASSIVE

syntax type hint(desc "type") =
  TYPE functype
syntax local hint(desc "local") =
  LOCAL valtype
syntax func hint(desc "function") =
  FUNC typeidx local* expr
syntax global hint(desc "global") =
  GLOBAL globaltype expr
syntax table hint(desc "table") =
  TABLE tabletype
syntax mem hint(desc "memory") =
  MEMORY memtype
syntax elem hint(desc "table segment") =
  ELEM reftype expr* elemmode
syntax data hint(desc "memory segment") =
  DATA byte* datamode
syntax start hint(desc "start function") =
  START funcidx

syntax externidx hint(desc "external index") =
  | FUNC funcidx | GLOBAL globalidx | TABLE tableidx | MEM memidx
syntax export hint(desc "export") =
  EXPORT name externidx
syntax import hint(desc "import") =
  IMPORT name name externtype

syntax module hint(desc "module") =
  MODULE type* import* func* global* table* mem* elem* data* start* export*


var ty : type
var loc : local
var glob : global
var tab : table
var im : import
var ex : export
var st : start
var xx : externidx
