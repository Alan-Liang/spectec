;;
;; Numerics
;;

;; Conversions

def $s33_to_u32(s33) : u32  hint(show %)


;; Signed numbers

def $signed(N, nat) : int       hint(show $signed_(%,%))
def $signed(N, i) = i           -- if $(0 <= 2^(N-1))
def $signed(N, i) = $(i - 2^N)  -- if $(2^(N-1) <= i < 2^N)

def $invsigned(N, int) : nat    hint(show $signed^(-1)#_%#(%))
def $invsigned(N, i) = j        -- if $signed(N, j) = i


;; TODO

def $unop(numtype, unop_(numtype), num_(numtype)) : num_(numtype)*
    hint(show %2#_%1#((%3)))
def $binop(numtype, binop_(numtype), num_(numtype), num_(numtype)) : num_(numtype)*
    hint(show %2#_%1#(%3, %4))
def $testop(numtype, testop_(numtype), num_(numtype)) : num_(I32)
    hint(show %2#_%1#((%3)))
def $relop(numtype, relop_(numtype), num_(numtype), num_(numtype)) : num_(I32)
    hint(show %2#_%1#(%3, %4))
def $cvtop(numtype_1, numtype_2, cvtop, sx?, num_(numtype_1)) : num_(numtype_2)*
    hint(show %3#$_((%1,%2))^(%4)#((%5)))

def $wrap(M, N, iN(M)) : iN(N)                      hint(show $wrap_((%,%))#((%)))
def $ext(M, N, sx, iN(M)) : iN(N)                   hint(show $ext_((%,%))^(%)#((%)))

def $ibits(N, iN(N)) : bit*                         hint(show $bits_(i#%,%))
def $fbits(N, fN(N)) : bit*                         hint(show $bits_(f#%,%))
def $ibytes(N, iN(N)) : byte*                       hint(show $bytes_(i#%,%))
def $fbytes(N, fN(N)) : byte*                       hint(show $bytes_(f#%,%))
def $nbytes(numtype, num_(numtype)) : byte*         hint(show $bytes_(%,%))
def $vbytes(vectype, vec_(vectype)) : byte*         hint(show $bytes_(%,%))


def $invibytes(N, byte*) : iN(N)
def $invfbytes(N, byte*) : fN(N)

def $invibytes(N, b*) = n  -- if $ibytes(N, n) = b*
def $invfbytes(N, b*) = p  -- if $fbytes(N, p) = b*


def $iadd(N, iN(N), iN(N)) : iN(N)      hint(show $iadd_%(%,%))
def $imul(N, iN(N), iN(N)) : iN(N)      hint(show $imul_%(%,%))
def $ine(N, iN(N), iN(N)) : u32         hint(show $ine_%(%,%))
def $ilt(N, sx, iN(N), iN(N)) : u32     hint(show $ilt_%^(%)(%,%))

def $narrow(M, N, sx, iN(M)) : iN(N)    hint(show $narrow_((%,%))^(%)#(%))


;; Packed values

def $packnum(lanetype, num_($unpack(lanetype))) : lnum_(lanetype)
    hint(show $pack_(%,%))
def $packnum(numtype, c) = c
def $packnum(packedtype, c) = $wrap($size($unpack(packedtype)), $psize(packedtype), c)

def $unpacknum(lanetype, lnum_(lanetype)) : num_($unpack(lanetype))
    hint(show $unpack_(%,%))
def $unpacknum(numtype, c) = c
def $unpacknum(packedtype, c) = $ext($psize(packedtype), $size($unpack(packedtype)), U, c)


;; Vectors

def $lanes_(shape, vec_(V128)) : lnum_($lanetype(shape))*
    hint(show $lanes_(%,%))

def $invlanes_(shape, lnum_($lanetype(shape))*) : vec_(V128)
    hint(show $lanes^(-1)#_%#(%,%))
def $invlanes_(sh, c*) = vc  -- if c* = $lanes_(sh, vc)

def $halfop(half, nat, nat) : nat
def $halfop(LOW, i, j) = i
def $halfop(HIGH, i, j) = j

;; TODO: return lists for nondeterminism
def $vvunop(vectype, vvunop, vec_(vectype)) : vec_(vectype)
    hint(show %2#_%1#((%3)))
def $vvbinop(vectype, vvbinop, vec_(vectype), vec_(vectype)) : vec_(vectype)
    hint(show %2#_%1#(%3, %4))
def $vvternop(vectype, vvternop, vec_(vectype), vec_(vectype), vec_(vectype)) : vec_(vectype)
    hint(show %2#_%1#(%3, %4, %5))

;; TODO: rename these to mapunop etc?
def $vunop(shape, vunop_(shape), vec_(V128)) : vec_(V128)
    hint(show %2#_%1#((%3)))
def $vbinop(shape, vbinop_(shape), vec_(V128), vec_(V128)) : vec_(V128)*
    hint(show %2#_%1#(%3, %4))
def $vrelop(shape, vrelop_(shape), vec_(V128), vec_(V128)) : vec_(V128)
    hint(show %2#_%1#(%3, %4))

def $vcvtop(shape_1, shape_2, vcvtop, sx?, lnum_($lanetype(shape_1))) : lnum_($lanetype(shape_2))
    hint(show %2#$_((%1,%))^(%5)#((%6)))

;; TODO: refactor for consistency?
def $vishiftop(shape, vshiftop_(shape), lnum_($lanetype(shape)), u32) : lnum_($lanetype(shape))
    hint(show %2#_%1#(%3, %4))
