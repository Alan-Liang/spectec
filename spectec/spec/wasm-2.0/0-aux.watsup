;;
;; General definitions
;;

;; General variables

var i : nat
var j : nat
var k : nat

syntax N = nat  ;; hack
syntax M = nat  ;; hack
syntax n = nat  ;; hack
syntax m = nat  ;; hack

var ii : int hint(show i)  ;; hack


;; General constants

def $Ki : nat
def $Ki = 1024


;; General numeric functions

def $min(nat, nat) : nat
def $min(0, j) = 0
def $min(i, 0) = 0
def $min($(i+1), $(j+1)) = $min(i, j)

def $sum(nat*) : nat  ;; TODO: hint
def $sum(eps) = 0
def $sum(n n'*) = $(n + $sum(n'*))


;; General sequence functions

def $concat_(syntax X, (X*)*) : X*  hint(show $concat(%2))
def $concat_(syntax X, eps) = eps
def $concat_(syntax X, (w*) (w'*)*) = w* $concat_(X, (w'*)*)

;; [1; 2]; [a; b; c] -> [1; a]; [1; b]; [1; c]; [2; a]; [2; b]; [2; c]
def $listproduct_(syntax X, (X*)*) : (X*)*
def $lpaux_(syntax X, X*, (X*)*) : (X*)*
def $lpaux2_(syntax X, X, (X*)*) : (X*)*

def $listproduct_(syntax X, eps)         = (eps)
def $listproduct_(syntax X, (w*) (w'*)*) = $lpaux_(X, w*, $listproduct_(X, w'**))

def $lpaux_(syntax X, eps,   (w''*)*) = eps
def $lpaux_(syntax X, w w'*, (w''*)*) = $lpaux2_(X, w, (w''*)*) $lpaux_(X, w'*, (w''*)*)

def $lpaux2_(syntax X, w, eps)           = eps
def $lpaux2_(syntax X, w, (w'*) (w''*)*) = (ww*) $lpaux2_(X, w, (w''*)*)
  -- if ww* = w w'*
