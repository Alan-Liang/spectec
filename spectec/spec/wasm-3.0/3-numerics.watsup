;;
;; Numerics
;;

;; Conversions

def $s33_to_u32(s33) : u32  hint(show %)


;; Signed numbers

def $signed_(N, nat) : int
def $signed_(N, i) = i           -- if $(0 <= 2^(N-1))
def $signed_(N, i) = $(i - 2^N)  -- if $(2^(N-1) <= i < 2^N)

def $invsigned_(N, int) : nat    hint(show $signed_(%)^(-1)#((%)))
def $invsigned_(N, i) = j        -- if $signed_(N, j) = i


;; TODO(3, all): implement numerics internally

def $unop_(numtype, unop_(numtype), num_(numtype)) : num_(numtype)*
    hint(show %2#$_(%1,%3))
def $binop_(numtype, binop_(numtype), num_(numtype), num_(numtype)) : num_(numtype)*
    hint(show %2#$_(%1,%3, %4))
def $testop_(numtype, testop_(numtype), num_(numtype)) : num_(I32)
    hint(show %2#$_(%1,%3))
def $relop_(numtype, relop_(numtype), num_(numtype), num_(numtype)) : num_(I32)
    hint(show %2#$_(%1,%3, %4))
def $cvtop__(numtype_1, numtype_2, cvtop__(numtype_1, numtype_2), num_(numtype_1)) : num_(numtype_2)*
    hint(show %3#$__(%1,%2,%4))

;; TODO(2, rossberg): support ' in suffix to express superscript arg, e.g., $extend'__(sx, M, N, ...)
def $wrap__(M, N, iN(M)) : iN(N)
def $extend__(M, N, sx, iN(M)) : iN(N)                hint(show $extend__(%,%)^(%)#((%)))
def $trunc__(M, N, sx, fN(M)) : iN(N)                 hint(show $trunc__(%,%)^(%)#((%)))
def $trunc_sat__(M, N, sx, fN(M)) : iN(N)             hint(show $trunc__sat__(%,%)^(%)#((%)))
def $demote__(M, N, fN(M)) : fN(N)
def $promote__(M, N, fN(M)) : fN(N)
def $convert__(M, N, sx, iN(M)) : fN(N)               hint(show $convert__(%,%)^(%)#((%)))
def $narrow__(M, N, sx, iN(M)) : iN(N)                hint(show $narrow__(%,%)^(%)#((%)))
def $reinterpret__(numtype_1, numtype_2, num_(numtype_1)) : num_(numtype_2)

def $ibits_(N, iN(N)) : bit*                         hint(show $bits_($IN(%),%))
def $fbits_(N, fN(N)) : bit*                         hint(show $bits_($FN(%),%))
def $ibytes_(N, iN(N)) : byte*                       hint(show $bytes_($IN(%),%))
def $fbytes_(N, fN(N)) : byte*                       hint(show $bytes_($FN(%),%))
def $nbytes_(numtype, num_(numtype)) : byte*         hint(show $bytes_(%,%))
def $vbytes_(vectype, vec_(vectype)) : byte*         hint(show $bytes_(%,%))
def $zbytes_(storagetype, lit_(storagetype)) : byte* hint(show $bytes_(%,%))
def $cbytes_(Cnn, lit_(Cnn)) : byte*                 hint(show $bytes_(%,%))


def $invibytes_(N, byte*) : iN(N) hint(show $bytes_($IN(%))^(-1)#((%)))
def $invfbytes_(N, byte*) : fN(N) hint(show $bytes_($FN(%))^(-1)#((%)))

def $invibytes_(N, b*) = n  -- if $ibytes_(N, n) = b*
def $invfbytes_(N, b*) = p  -- if $fbytes_(N, p) = b*


def $iadd_(N, iN(N), iN(N)) : iN(N)
def $isub_(N, iN(N), iN(N)) : iN(N)
def $imul_(N, iN(N), iN(N)) : iN(N)
def $idiv_(N, sx, iN(N), iN(N)) : iN(N)  hint(show $idiv_(%)^(%)#((%,%)))
def $irem_(N, sx, iN(N), iN(N)) : iN(N)  hint(show $irem_(%)^(%)#((%,%)))
def $inot_(N, iN(N)) : iN(N)
def $iand_(N, iN(N), iN(N)) : iN(N)
def $iandnot_(N, iN(N), iN(N)) : iN(N)
def $ior_(N, iN(N), iN(N)) : iN(N)
def $ixor_(N, iN(N), iN(N)) : iN(N)
def $ishl_(N, iN(N), u32) : iN(N)
def $ishr_(N, sx, iN(N), u32) : iN(N)    hint(show $ishr_(%)^(%)#((%,%)))
def $irotl_(N, iN(N), iN(N)) : iN(N)
def $irotr_(N, iN(N), iN(N)) : iN(N)
def $iclz_(N, iN(N)) : iN(N)
def $ictz_(N, iN(N)) : iN(N)
def $ipopcnt_(N, iN(N)) : iN(N)
def $ieqz_(N, iN(N)) : u32
def $ieq_(N, iN(N), iN(N)) : u32
def $ine_(N, iN(N), iN(N)) : u32
def $ilt_(N, sx, iN(N), iN(N)) : u32     hint(show $ilt_(%)^(%)#((%,%)))
def $igt_(N, sx, iN(N), iN(N)) : u32     hint(show $igt_(%)^(%)#((%,%)))
def $ile_(N, sx, iN(N), iN(N)) : u32     hint(show $ile_(%)^(%)#((%,%)))
def $ige_(N, sx, iN(N), iN(N)) : u32     hint(show $ige_(%)^(%)#((%,%)))
def $ibitselect_(N, iN(N), iN(N), iN(N)) : iN(N)
def $iabs_(N, iN(N)) : iN(N)
def $ineg_(N, iN(N)) : iN(N)
def $imin_(N, sx, iN(N), iN(N)) : iN(N)         hint(show $imin_(%)^(%)%((%,%)))
def $imax_(N, sx, iN(N), iN(N)) : iN(N)         hint(show $imax_(%)^(%)%((%,%)))
def $iadd_sat_(N, sx, iN(N), iN(N)) : iN(N)     hint(show $iadd__sat_(%)^(%)#((%,%)))
def $isub_sat_(N, sx, iN(N), iN(N)) : iN(N)     hint(show $isub__sat_(%)^(%)#((%,%)))
def $iavgr_(N, sx, iN(N), iN(N)) : iN(N)        hint(show $iavgr_(%)^(%)#((%,%)))
def $iq15mulr_sat_(N, sx, iN(N), iN(N)) : iN(N) hint(show $iq15mulr__sat_(%)^(%)#((%,%)))

def $fadd_(N, fN(N), fN(N)) : fN(N)
def $fsub_(N, fN(N), fN(N)) : fN(N)
def $fmul_(N, fN(N), fN(N)) : fN(N)
def $fdiv_(N, fN(N), fN(N)) : fN(N)
def $fmin_(N, fN(N), fN(N)) : fN(N)
def $fmax_(N, fN(N), fN(N)) : fN(N)
def $fpmin_(N, fN(N), fN(N)) : fN(N)
def $fpmax_(N, fN(N), fN(N)) : fN(N)
def $fcopysign_(N, fN(N), fN(N)) : fN(N)
def $fabs_(N, fN(N)) : fN(N)
def $fneg_(N, fN(N)) : fN(N)
def $fsqrt_(N, fN(N)) : fN(N)
def $fceil_(N, fN(N)) : fN(N)
def $ffloor_(N, fN(N)) : fN(N)
def $ftrunc_(N, fN(N)) : fN(N)
def $fnearest_(N, fN(N)) : fN(N)
def $feq_(N, fN(N), fN(N)) : u32
def $fne_(N, fN(N), fN(N)) : u32
def $flt_(N, fN(N), fN(N)) : u32
def $fgt_(N, fN(N), fN(N)) : u32
def $fle_(N, fN(N), fN(N)) : u32
def $fge_(N, fN(N), fN(N)) : u32


def $binop_(Inn, ADD, iN_1, iN_2) = $iadd_($size(Inn), iN_1, iN_2)
def $binop_(Inn, SUB, iN_1, iN_2) = $isub_($size(Inn), iN_1, iN_2)
def $binop_(Inn, MUL, iN_1, iN_2) = $imul_($size(Inn), iN_1, iN_2)
def $binop_(Inn, DIV sx, iN_1, iN_2) = $idiv_($size(Inn), sx, iN_1, iN_2)
def $binop_(Inn, REM sx, iN_1, iN_2) = $irem_($size(Inn), sx, iN_1, iN_2)
def $binop_(Inn, AND, iN_1, iN_2) = $iand_($size(Inn), iN_1, iN_2)
def $binop_(Inn, OR, iN_1, iN_2) = $ior_($size(Inn), iN_1, iN_2)
def $binop_(Inn, XOR, iN_1, iN_2) = $ixor_($size(Inn), iN_1, iN_2)
def $binop_(Inn, SHL, iN_1, iN_2) = $ishl_($size(Inn), iN_1, iN_2)
def $binop_(Inn, SHR sx, iN_1, iN_2) = $ishr_($size(Inn), sx, iN_1, iN_2)
def $binop_(Inn, ROTL, iN_1, iN_2) = $irotl_($size(Inn), iN_1, iN_2)
def $binop_(Inn, ROTR, iN_1, iN_2) = $irotr_($size(Inn), iN_1, iN_2)
def $unop_(Inn, CLZ, iN) = $iclz_($size(Inn), iN)
def $unop_(Inn, CTZ, iN) = $ictz_($size(Inn), iN)
def $unop_(Inn, POPCNT, iN) = $ipopcnt_($size(Inn), iN)
def $unop_(Inn, EXTEND N, iN) = $extend__(N, $size(Inn), S, $wrap__($size(Inn), N, iN))
def $testop_(Inn, EQZ, iN) = $ieqz_($size(Inn), iN)
def $relop_(Inn, EQ, iN_1, iN_2) = $ieq_($size(Inn), iN_1, iN_2)
def $relop_(Inn, NE, iN_1, iN_2) = $ine_($size(Inn), iN_1, iN_2)
def $relop_(Inn, LT sx, iN_1, iN_2) = $ilt_($size(Inn), sx, iN_1, iN_2)
def $relop_(Inn, GT sx, iN_1, iN_2) = $igt_($size(Inn), sx, iN_1, iN_2)
def $relop_(Inn, LE sx, iN_1, iN_2) = $ile_($size(Inn), sx, iN_1, iN_2)
def $relop_(Inn, GE sx, iN_1, iN_2) = $ige_($size(Inn), sx, iN_1, iN_2)

def $binop_(Fnn, ADD, fN_1, fN_2) = $fadd_($size(Fnn), fN_1, fN_2)
def $binop_(Fnn, SUB, fN_1, fN_2) = $fsub_($size(Fnn), fN_1, fN_2)
def $binop_(Fnn, MUL, fN_1, fN_2) = $fmul_($size(Fnn), fN_1, fN_2)
def $binop_(Fnn, DIV, fN_1, fN_2) = $fdiv_($size(Fnn), fN_1, fN_2)
def $binop_(Fnn, MIN, fN_1, fN_2) = $fmin_($size(Fnn), fN_1, fN_2)
def $binop_(Fnn, MAX, fN_1, fN_2) = $fmax_($size(Fnn), fN_1, fN_2)
def $binop_(Fnn, COPYSIGN, fN_1, fN_2) = $fcopysign_($size(Fnn), fN_1, fN_2)

def $unop_(Fnn, ABS, fN) = $fabs_($size(Fnn), fN)
def $unop_(Fnn, NEG, fN) = $fneg_($size(Fnn), fN)
def $unop_(Fnn, SQRT, fN) = $fsqrt_($size(Fnn), fN)
def $unop_(Fnn, CEIL, fN) = $fceil_($size(Fnn), fN)
def $unop_(Fnn, FLOOR, fN) = $ffloor_($size(Fnn), fN)
def $unop_(Fnn, TRUNC, fN) = $ftrunc_($size(Fnn), fN)
def $unop_(Fnn, NEAREST, fN) = $fnearest_($size(Fnn), fN)

def $relop_(Fnn, EQ, fN_1, fN_2) = $feq_($size(Fnn), fN_1, fN_2)
def $relop_(Fnn, NE, fN_1, fN_2) = $fne_($size(Fnn), fN_1, fN_2)
def $relop_(Fnn, LT, fN_1, fN_2) = $flt_($size(Fnn), fN_1, fN_2)
def $relop_(Fnn, GT, fN_1, fN_2) = $fgt_($size(Fnn), fN_1, fN_2)
def $relop_(Fnn, LE, fN_1, fN_2) = $fle_($size(Fnn), fN_1, fN_2)
def $relop_(Fnn, GE, fN_1, fN_2) = $fge_($size(Fnn), fN_1, fN_2)

def $cvtop__(Inn_1, Inn_2, EXTEND sx, iN_1) = $extend__($sizenn1(Inn_1), $sizenn2(Inn_2), sx, iN_1)
def $cvtop__(Inn_1, Inn_2, WRAP, iN_1) = $wrap__($sizenn1(Inn_1), $sizenn2(Inn_2), iN_1)
def $cvtop__(Fnn_1, Inn_2, TRUNC sx, fN_1) = $trunc__($sizenn1(Fnn_1), $sizenn2(Inn_2), sx, fN_1)
def $cvtop__(Fnn_1, Inn_2, TRUNC_SAT sx, fN_1) = $trunc_sat__($sizenn1(Fnn_1), $sizenn2(Inn_2), sx, fN_1)
def $cvtop__(Inn_1, Fnn_2, CONVERT sx, iN_1) = $convert__($sizenn1(Inn_1), $sizenn2(Fnn_2), sx, iN_1)
def $cvtop__(Fnn_1, Fnn_2, PROMOTE, fN_1) = $promote__($sizenn1(Fnn_1), $sizenn2(Fnn_2), fN_1)
def $cvtop__(Fnn_1, Fnn_2, DEMOTE, fN_1) = $demote__($sizenn1(Fnn_1), $sizenn2(Fnn_2), fN_1)
def $cvtop__(Inn_1, Fnn_2, REINTERPRET, iN_1) = $reinterpret__(Inn_1, Fnn_2, iN_1) -- if $sizenn1(Inn_1) = $sizenn2(Fnn_2)
def $cvtop__(Fnn_1, Inn_2, REINTERPRET, fN_1) = $reinterpret__(Fnn_1, Inn_2, fN_1) -- if $sizenn1(Fnn_1) = $sizenn2(Inn_2)


;; Packed numbers

def $lpacknum_(lanetype, num_($lunpack(lanetype))) : lane_(lanetype)
    hint(show $pack_(%,%)) hint(macro "packnum")
def $lpacknum_(numtype, c) = c
def $lpacknum_(packtype, c) = $wrap__($size($lunpack(packtype)), $psize(packtype), c)

def $lunpacknum_(lanetype, lane_(lanetype)) : num_($lunpack(lanetype))
    hint(show $unpack_(%,%)) hint(macro "unpacknum")
def $lunpacknum_(numtype, c) = c
def $lunpacknum_(packtype, c) = $extend__($psize(packtype), $size($lunpack(packtype)), U, c)

def $cpacknum_(storagetype, lit_($cunpack(storagetype))) : lit_(storagetype)
    hint(show $pack_(%,%)) hint(macro "packnum")
def $cpacknum_(consttype, c) = c
def $cpacknum_(packtype, c) = $wrap__($size($lunpack(packtype)), $psize(packtype), c)

def $cunpacknum_(storagetype, lit_(storagetype)) : lit_($cunpack(storagetype))
    hint(show $unpack_(%,%)) hint(macro "unpacknum")
def $cunpacknum_(consttype, c) = c
def $cunpacknum_(packtype, c) = $extend__($psize(packtype), $size($lunpack(packtype)), U, c)


;; Vectors

def $lanes_(shape, vec_(V128)) : lane_($lanetype(shape))*

def $invlanes_(shape, lane_($lanetype(shape))*) : vec_(V128)
    hint(show $lanes_(%)^(-1)#((%)))
def $invlanes_(sh, c*) = vc  -- if c* = $lanes_(sh, vc)

;; TODO(3, rossberg): somehow enable merging cases
def $half__(shape_1, shape_2, half__(shape_1, shape_2), nat, nat) : nat hint(show $half(%3,%4,%5))
def $half__(Jnn_1 X M_1, Jnn_2 X M_2, LOW, i, j) = i
def $half__(Jnn_1 X M_1, Jnn_2 X M_2, HIGH, i, j) = j
def $half__(Lnn_1 X M_1, Fnn_2 X M_2, LOW, i, j) = i

;; TODO(1, rossberg): return lists for nondeterminism
def $vvunop_(vectype, vvunop, vec_(vectype)) : vec_(vectype)
    hint(show %2#$_(%1,%3))
def $vvbinop_(vectype, vvbinop, vec_(vectype), vec_(vectype)) : vec_(vectype)
    hint(show %2#$_(%1,%3,%4))
def $vvternop_(vectype, vvternop, vec_(vectype), vec_(vectype), vec_(vectype)) : vec_(vectype)
    hint(show %2#$_(%1,%3,%4,%5))

def $vvunop_(V128, NOT, v128) = $inot_($vsize(V128), v128)
def $vvbinop_(V128, AND, v128_1, v128_2) = $iand_($vsize(V128), v128_1, v128_2)
def $vvbinop_(V128, ANDNOT, v128_1, v128_2) = $iandnot_($vsize(V128), v128_1, v128_2)
def $vvbinop_(V128, OR, v128_1, v128_2) = $ior_($vsize(V128), v128_1, v128_2)
def $vvbinop_(V128, XOR, v128_1, v128_2) = $ixor_($vsize(V128), v128_1, v128_2)
def $vvternop_(V128, BITSELECT, v128_1, v128_2, v128_3) = $ibitselect_($vsize(V128), v128_1, v128_2, v128_3)

;; TODO(2, rossberg): rename these to mapunop etc?
def $vunop_(shape, vunop_(shape), vec_(V128)) : vec_(V128)
    hint(show %2#$_(%1,%3))
def $vbinop_(shape, vbinop_(shape), vec_(V128), vec_(V128)) : vec_(V128)*
    hint(show %2#$_(%1,%3,%4))
def $vrelop_(shape, vrelop_(shape), vec_(V128), vec_(V128)) : vec_(V128)
    hint(show %2#$_(%1,%3,%4))
def $vcvtop__(shape_1, shape_2, vcvtop__(shape_1, shape_2), sx?, lane_($lanetype(shape_1))) : lane_($lanetype(shape_2))
    hint(show %3#$__(%1,%2)^(%4)#((%5)))

def $vunop_(Jnn X N, ABS, v128_1) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if v128 = $invlanes_(Jnn X N, $iabs_($lsize(Jnn), lane_1)*)
def $vunop_(Jnn X N, NEG, v128_1) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if v128 = $invlanes_(Jnn X N, $ineg_($lsize(Jnn), lane_1)*)
def $vunop_(Jnn X N, POPCNT, v128_1) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if v128 = $invlanes_(Jnn X N, $ipopcnt_($lsize(Jnn), lane_1)*)

def $vbinop_(Jnn X N, ADD, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if v128 = $invlanes_(Jnn X N, $iadd_($lsize(Jnn), lane_1, lane_2)*)
def $vbinop_(Jnn X N, SUB, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if v128 = $invlanes_(Jnn X N, $isub_($lsize(Jnn), lane_1, lane_2)*)
def $vbinop_(Jnn X N, MIN sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if v128 = $invlanes_(Jnn X N, $imin_($lsize(Jnn), sx, lane_1, lane_2)*)
def $vbinop_(Jnn X N, MAX sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if v128 = $invlanes_(Jnn X N, $imax_($lsize(Jnn), sx, lane_1, lane_2)*)
def $vbinop_(Jnn X N, ADD_SAT sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if v128 = $invlanes_(Jnn X N, $iadd_sat_($lsize(Jnn), sx, lane_1, lane_2)*)
def $vbinop_(Jnn X N, SUB_SAT sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if v128 = $invlanes_(Jnn X N, $isub_sat_($lsize(Jnn), sx, lane_1, lane_2)*)
def $vbinop_(Jnn X N, MUL, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if v128 = $invlanes_(Jnn X N, $imul_($lsize(Jnn), lane_1, lane_2)*)
def $vbinop_(Jnn X N, AVGR U, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if v128 = $invlanes_(Jnn X N, $iavgr_($lsize(Jnn), U, lane_1, lane_2)*)
def $vbinop_(Jnn X N, Q15MULR_SAT S, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if v128 = $invlanes_(Jnn X N, $iq15mulr_sat_($lsize(Jnn), S, lane_1, lane_2)*)

def $vrelop_(Jnn X N, EQ, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if lane_3* = $extend__(1, $lsize(Jnn), S, $ieq_($lsize(Jnn), lane_1, lane_2))*
    -- if v128 = $invlanes_(Jnn X N, lane_3*)
def $vrelop_(Jnn X N, NE, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if lane_3* = $extend__(1, $lsize(Jnn), S, $ine_($lsize(Jnn), lane_1, lane_2))*
    -- if v128 = $invlanes_(Jnn X N, lane_3*)
def $vrelop_(Jnn X N, LT sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if lane_3* = $extend__(1, $lsize(Jnn), S, $ilt_($lsize(Jnn), sx, lane_1, lane_2))*
    -- if v128 = $invlanes_(Jnn X N, lane_3*)
def $vrelop_(Jnn X N, GT sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if lane_3* = $extend__(1, $lsize(Jnn), S, $igt_($lsize(Jnn), sx, lane_1, lane_2))*
    -- if v128 = $invlanes_(Jnn X N, lane_3*)
def $vrelop_(Jnn X N, LE sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if lane_3* = $extend__(1, $lsize(Jnn), S, $ile_($lsize(Jnn), sx, lane_1, lane_2))*
    -- if v128 = $invlanes_(Jnn X N, lane_3*)
def $vrelop_(Jnn X N, GE sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if lane_3* = $extend__(1, $lsize(Jnn), S, $ige_($lsize(Jnn), sx, lane_1, lane_2))*
    -- if v128 = $invlanes_(Jnn X N, lane_3*)

def $vunop_(Fnn X N, ABS, v128_1) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if v128 = $invlanes_(Fnn X N, $fabs_($size(Fnn), lane_1)*)
def $vunop_(Fnn X N, NEG, v128_1) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if v128 = $invlanes_(Fnn X N, $fneg_($size(Fnn), lane_1)*)
def $vunop_(Fnn X N, SQRT, v128_1) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if v128 = $invlanes_(Fnn X N, $fsqrt_($size(Fnn), lane_1)*)
def $vunop_(Fnn X N, CEIL, v128_1) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if v128 = $invlanes_(Fnn X N, $fceil_($size(Fnn), lane_1)*)
def $vunop_(Fnn X N, FLOOR, v128_1) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if v128 = $invlanes_(Fnn X N, $ffloor_($size(Fnn), lane_1)*)
def $vunop_(Fnn X N, TRUNC, v128_1) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if v128 = $invlanes_(Fnn X N, $ftrunc_($size(Fnn), lane_1)*)
def $vunop_(Fnn X N, NEAREST, v128_1) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if v128 = $invlanes_(Fnn X N, $fnearest_($size(Fnn), lane_1)*)

def $vbinop_(Fnn X N, ADD, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if v128 = $invlanes_(Fnn X N, $fadd_($size(Fnn), lane_1, lane_2)*)
def $vbinop_(Fnn X N, SUB, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if v128 = $invlanes_(Fnn X N, $fsub_($size(Fnn), lane_1, lane_2)*)
def $vbinop_(Fnn X N, MUL, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if v128 = $invlanes_(Fnn X N, $fmul_($size(Fnn), lane_1, lane_2)*)
def $vbinop_(Fnn X N, DIV, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if v128 = $invlanes_(Fnn X N, $fdiv_($size(Fnn), lane_1, lane_2)*)
def $vbinop_(Fnn X N, MIN, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if v128 = $invlanes_(Fnn X N, $fmin_($size(Fnn), lane_1, lane_2)*)
def $vbinop_(Fnn X N, MAX, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if v128 = $invlanes_(Fnn X N, $fmax_($size(Fnn), lane_1, lane_2)*)
def $vbinop_(Fnn X N, PMIN, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if v128 = $invlanes_(Fnn X N, $fpmin_($size(Fnn), lane_1, lane_2)*)
def $vbinop_(Fnn X N, PMAX, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if v128 = $invlanes_(Fnn X N, $fpmax_($size(Fnn), lane_1, lane_2)*)

def $vrelop_(Fnn X N, EQ, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if lane_3* = $extend__(1, $size(Fnn), S, $feq_($size(Fnn), lane_1, lane_2))*
    -- if $isize(Inn) = $size(Fnn)
    -- if v128 = $invlanes_(Inn X N, lane_3*)
def $vrelop_(Fnn X N, NE, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if lane_3* = $extend__(1, $size(Fnn), S, $fne_($size(Fnn), lane_1, lane_2))*
    -- if $isize(Inn) = $size(Fnn)
    -- if v128 = $invlanes_(Inn X N, lane_3*)
def $vrelop_(Fnn X N, LT, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if lane_3* = $extend__(1, $size(Fnn), S, $flt_($size(Fnn), lane_1, lane_2))*
    -- if $isize(Inn) = $size(Fnn)
    -- if v128 = $invlanes_(Inn X N, lane_3*)
def $vrelop_(Fnn X N, GT, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if lane_3* = $extend__(1, $size(Fnn), S, $fgt_($size(Fnn), lane_1, lane_2))*
    -- if $isize(Inn) = $size(Fnn)
    -- if v128 = $invlanes_(Inn X N, lane_3*)
def $vrelop_(Fnn X N, LE, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if lane_3* = $extend__(1, $size(Fnn), S, $fle_($size(Fnn), lane_1, lane_2))*
    -- if $isize(Inn) = $size(Fnn)
    -- if v128 = $invlanes_(Inn X N, lane_3*)
def $vrelop_(Fnn X N, GE, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if lane_3* = $extend__(1, $size(Fnn), S, $fge_($size(Fnn), lane_1, lane_2))*
    -- if $isize(Inn) = $size(Fnn)
    -- if v128 = $invlanes_(Inn X N, lane_3*)

def $vcvtop__(I8 X N_1, I16 X N_2, EXTEND, sx, i8) = i16
    -- if i16 = $extend__(8, 16, sx, i8)
def $vcvtop__(I16 X N_1, I32 X N_2, EXTEND, sx, i16) = i32
    -- if i32 = $extend__(16, 32, sx, i16)
def $vcvtop__(I32 X N_1, I64 X N_2, EXTEND, sx, i32) = i64
    -- if i64 = $extend__(32, 64, sx, i32)
def $vcvtop__(I32 X N_1, F32 X N_2, CONVERT, sx, i32) = f32
    -- if f32 = $convert__(32, 32, sx, i32)
def $vcvtop__(I32 X N_1, F64 X N_2, CONVERT, sx, i32) = f64
    -- if f64 = $convert__(32, 64, sx, i32)
def $vcvtop__(F32 X N_1, I32 X N_2, TRUNC_SAT, sx, f32) = i32
    -- if i32 = $trunc_sat__(32, 32, sx, f32)
def $vcvtop__(F64 X N_1, I32 X N_2, TRUNC_SAT, sx, f64) = i32
    -- if i32 = $trunc_sat__(64, 32, sx, f64)
def $vcvtop__(F64 X N_1, F32 X N_2, DEMOTE, sx?, f64) = f32
    -- if f32 = $demote__(64, 32, f64)
def $vcvtop__(F32 X N_1, F64 X N_2, PROMOTE, sx?, f32) = f64
    -- if f64 = $promote__(32, 64, f32)

def $vextunop__(ishape_1, ishape_2, vextunop__(ishape_1, ishape_2), vec_(V128)) : vec_(V128)
    hint(show %3#$__(%1,%2,%4))
def $vextbinop__(ishape_1, ishape_2, vextbinop__(ishape_1, ishape_2), vec_(V128), vec_(V128)) : vec_(V128)
    hint(show %3#$__(%1,%2,%4,%5))

def $vextunop__(Jnn_1 X N_1, Jnn_2 X N_2, EXTADD_PAIRWISE sx, c_1) = c
  -- var cj_1 : iN($lsize(Jnn_2))
  -- var cj_2 : iN($lsize(Jnn_2))
  -- if ci* = $lanes_(Jnn_1 X N_1, c_1)
  -- if $concat_(iN($lsize(Jnn_2)), (cj_1 cj_2)*) = $extend__($lsize(Jnn_1), $lsize(Jnn_2), sx, ci)*
  -- if c = $invlanes_(Jnn_2 X N_2, $iadd_($lsize(Jnn_2), cj_1, cj_2)*)

def $vextbinop__(Jnn_1 X N_1, Jnn_2 X N_2, EXTMUL sx half, c_1, c_2) = c
  -- if ci_1* = $lanes_(Jnn_1 X N_1, c_1)[$half__(Jnn_1 X N_1, Jnn_2 X N_2, half, 0, N_2) : N_2]
  -- if ci_2* = $lanes_(Jnn_1 X N_1, c_2)[$half__(Jnn_1 X N_1, Jnn_2 X N_2, half, 0, N_2) : N_2]
  -- if c = $invlanes_(Jnn_2 X N_2, $imul_($lsize(Jnn_2), $extend__($lsize(Jnn_1), $lsize(Jnn_2), sx, ci_1), $extend__($lsize(Jnn_1), $lsize(Jnn_2), sx, ci_2))*)

def $vextbinop__(Jnn_1 X N_1, Jnn_2 X N_2, DOT S, c_1, c_2) = c
  -- var cj_1 : iN($lsize(Jnn_2))
  -- var cj_2 : iN($lsize(Jnn_2))
  -- if ci_1* = $lanes_(Jnn_1 X N_1, c_1)
  -- if ci_2* = $lanes_(Jnn_1 X N_1, c_2)
  -- if $concat_(iN($lsize(Jnn_2)), (cj_1 cj_2)*) = $imul_($lsize(Jnn_2), $extend__($lsize(Jnn_1), $lsize(Jnn_2), S, ci_1), $extend__($lsize(Jnn_1), $lsize(Jnn_2), S, ci_2))*
  -- if c = $invlanes_(Jnn_2 X N_2, $iadd_($lsize(Jnn_2), cj_1, cj_2)*)

;; TODO(3, rossberg): refactor for consistency?
def $vshiftop_(ishape, vshiftop_(ishape), lane_($lanetype(ishape)), u32) : lane_($lanetype(ishape))
    hint(show %2#$_(%1)#(%3, %4))

def $vshiftop_(Jnn X N, SHL, lane, n) = $ishl_($lsize(Jnn), lane, n)
def $vshiftop_(Jnn X N, SHR sx, lane, n) = $ishr_($lsize(Jnn), sx, lane, n)
