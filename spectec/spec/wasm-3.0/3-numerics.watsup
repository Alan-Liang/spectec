;;
;; Numerics
;;

;; Conversions

def $s33_to_u32(s33) : u32  hint(show %)


;; Signed numbers

def $signed(N, nat) : int       hint(show $signed_(%,%))
def $signed(N, i) = i           -- if $(0 <= 2^(N-1))
def $signed(N, i) = $(i - 2^N)  -- if $(2^(N-1) <= i < 2^N)

def $invsigned(N, int) : nat    hint(show $signed^(-1)#_%#(%))
def $invsigned(N, i) = j        -- if $signed(N, j) = i


;; TODO

def $unop(unop_numtype, numtype, c) : c_numtype*         hint(show %#_%#((%)))
def $binop(binop_numtype, numtype, c, c) : c_numtype*    hint(show %#_%#(%, %))
def $testop(testop_numtype, numtype, c) : c_numtype      hint(show %#_%#((%)))
def $relop(relop_numtype, numtype, c, c) : c_numtype     hint(show %#_%#(%, %))
def $cvtop(cvtop, numtype, numtype, sx?, c) : c_numtype* hint(show %#$_((%,%))^(%)#((%)))

def $wrap(nat, nat, c) : nat                             hint(show $wrap_((%,%))#((%)))
def $ext(nat, nat, sx, c) : c_numtype                    hint(show $ext_((%,%))^(%)#((%)))

def $ibytes(N, iN(N)) : byte*         hint(show $bytes_(i#%,%))
def $fbytes(N, fN(N)) : byte*         hint(show $bytes_(f#%,%))
def $ntbytes(numtype, c) : byte*      hint(show $bytes_(%,%))
def $ztbytes(storagetype, c) : byte*  hint(show $bytes_(%,%))

def $invibytes(N, byte*) : iN(N)
def $invfbytes(N, byte*) : fN(N)

def $invibytes(N, b*) = n  -- if $ibytes(N, n) = b*
def $invfbytes(N, b*) = p  -- if $fbytes(N, p) = b*

def $ine_128(c_vectype, c_vectype) : nat
def $imul(N, c, c) : c_numtype
def $iadd(N, c, c) : c_numtype
def $lanes(shape, c_vectype) : nat*
def $narrow(nat, nat, sx, nat) : nat
def $ibits(nat, nat) : nat*
def $ilt_s(nat, nat, nat) : nat

def $unpacked(shape) : numtype
def $unpacked(sh) = nt
    -- if sh = SHAPE lnt lns
    -- if lnt = nt
def $unpacked(shape) = I32
    -- if sh = SHAPE lnt lns
    -- if lnt = pt
def $dim(shape) : lanesize
def $dim(sh) = lns
    -- if sh = SHAPE lnt lns
def $halfop(half, nat, nat) : nat
def $halfop(hf, i, j) = i
    -- if hf = LOW
def $halfop(hf, i, j) = j
    -- if hf = HIGH

def $ishape(nat) : lanetype
def $ishape(nat) = I8
    -- if nat = 8
def $ishape(nat) = I16
    -- if nat = 16
def $ishape(nat) = I32
    -- if nat = 32
def $ishape(nat) = I64
    -- if nat = 64

def $vvunop(unop_vvectype, vectype, c_vectype) : c_vectype                           hint(show %#_%#((%)))
def $vvbinop(binop_vvectype, vectype, c_vectype, c_vectype) : c_vectype              hint(show %#_%#(%, %))
def $vvternop(ternop_vvectype, vectype, c_vectype, c_vectype, c_vectype) : c_vectype hint(show %#_%#(%, %, %))
def $vunop(unop_vectype, shape, c_vectype) : c_vectype
def $vbinop(binop_vectype, shape, c_vectype, c_vectype) : c_vectype*
def $vrelop(relop_vectype, shape, c_vectype, c_vectype) : c_numtype
def $vishiftop(shiftop_vectype, lanetype, nat*, nat*) : nat*                         hint(show %#_%#(%, %))
def $vcvtop(cvtop_vectype, nat, nat, sx?, nat) : nat                                 hint(show %#_%#(%, %, %))
