;;
;; Auxiliary definitions used for describing meta conventions
;;

;; Syntax notation

syntax A hint(macro none) = nat
syntax B hint(macro none) = nat

syntax sym hint(macro none) = _FIRST A_1 | _DOTS hint(show `...) | _LAST A_n
syntax symsplit/1 hint(show sym) hint(macro none) = _FIRST A_1 | ...
syntax symsplit/2 hint(show sym) hint(macro none) = ... | _LAST A_2

syntax recorddots hint(show !%) = ()
syntax record hint(show r) hint(macro none none) =
  { FIELD_1 A_1 hint(show FIELD_ 1), \
    FIELD_2 A_2 hint(show FIELD_ 2), \
    `... recorddots }

syntax pth hint(macro none) = PTHSYNTAX hint(show (`[i] `| !%.FIELD)+)


;; Validation notation

syntax T hint(macro none) = nat

relation Premise: nat
relation Premisedots: `... hint(macro none)
relation Scheme: nat

rule Scheme:
  conclusion
  -- Premise: premise_1
  -- Premise: premise_2
  -- Premisedots: `...
  -- Premise: premise_n

relation InstrScheme: context |- instr* : functype hint(macro none)

rule InstrScheme/i32.add:
  C |- BINOP I32 ADD : I32 I32 -> I32

rule InstrScheme/global.get:
  C |- GLOBAL.GET x : eps -> t
  -- if C.GLOBALS[x] = mut t

rule InstrScheme/block:
  C |- BLOCK blocktype instr* : t_1* -> t_2*
  -- Blocktype_ok: C |- blocktype : t_1* -> t_2*
  -- InstrScheme: C, LABELS (t_2*) |- instr* : t_1* -> t_2*
