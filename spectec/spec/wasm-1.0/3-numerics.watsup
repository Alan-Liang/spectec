;;
;; Numerics
;;

;; Signed numbers

def $signed(N, nat) : int       hint(show $signed_(%,%))
def $signed(N, i) = i           -- if $(0 <= 2^(N-1))
def $signed(N, i) = $(i - 2^N)  -- if $(2^(N-1) <= i < 2^N)

def $invsigned(N, int) : nat    hint(show $signed^(-1)#_%#(%))
def $invsigned(N, i) = j        -- if $signed(N, j) = i


;; TODO
;; need to switch parameter order for type indexing to work

def $unop(unop_(valtype), valtype, const_(valtype)) : const_(valtype)*         hint(show %#_%#((%)))
def $binop(binop_(valtype), valtype, const_(valtype), const_(valtype)) : const_(valtype)*    hint(show %#_%#(%, %))
def $testop(testop_(valtype), valtype, const_(valtype)) : const_(valtype)      hint(show %#_%#((%)))
def $relop(relop_(valtype), valtype, const_(valtype), const_(valtype)) : const_(valtype)     hint(show %#_%#(%, %))
def $cvtop(cvtop, valtype_1, valtype_2, sx?, const_(valtype_1)) : const_(valtype_2)* hint(show %#$_((%,%))^(%)#((%)))

def $wrap(M, N, iN(M)) : iN(N)                      hint(show $wrap_((%,%))#((%)))
def $ext(M, N, sx, iN(M)) : iN(N)                   hint(show $ext_((%,%))^(%)#((%)))

def $ibytes(N, iN(N)) : byte*                       hint(show $bytes_(i#%,%))
def $fbytes(N, fN(N)) : byte*                       hint(show $bytes_(f#%,%))
def $bytes(valtype, const_(valtype)) : byte*        hint(show $bytes_(%,%))

def $invibytes(N, byte*) : iN(N)
def $invfbytes(N, byte*) : fN(N)

def $invibytes(N, b*) = n  -- if $ibytes(N, n) = b*
def $invfbytes(N, b*) = p  -- if $fbytes(N, p) = b*
