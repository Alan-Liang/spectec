;;
;; Auxiliary definitions on indices
;;

;; Sequence difference

def $setminus(idx*, idx*) : idx*  hint(show %\%)
def $setminus1(idx, idx*) : idx*

def $setminus(epsilon, y*) = epsilon
def $setminus(x_1 x*, y*) = $setminus1(x_1, y*) $setminus(x*, y*)

def $setminus1(x, epsilon) = x
def $setminus1(x, y_1 y*) = epsilon            -- if x = y_1
def $setminus1(x, y_1 y*) = $setminus1(x, y*)  -- otherwise


;;
;; Auxiliary Definitions on Types
;;

;; Size

;; def |I n| = |F n| = |V n| = n        ;; ????

def $size(valtype) : nat  hint(partial) hint(show |%|)
def $size(I32) = 32
def $size(I64) = 64
def $size(F32) = 32
def $size(F64) = 64
def $size(V128) = 128

def $packedsize(packedtype) : nat  hint(show |%|)
def $packedsize(I8) = 8
def $packedsize(I16) = 16

def $storagesize(storagetype) : nat  hint(show |%|)
def $storagesize(valtype) = $size(valtype)
def $storagesize(packedtype) = $packedsize(packedtype)


;; Unpacking

def $unpacktype(storagetype) : valtype  hint(show $unpack(%))
def $unpacktype(valtype) = valtype
def $unpacktype(packedtype) = I32

def $sx_field(storagetype) : sx?  hint(show $sx(%))
def $sx_field(valtype) = epsilon
def $sx_field(packedtype) = S


;; Substitution

syntax typevar = | _IDX typeidx | REC nat
var xx : typevar

def $subst_typevar(typevar, typevar*, heaptype*) : heaptype            hint(show %`[%:=%])

def $subst_numtype(numtype, typevar*, heaptype*) : numtype             hint(show %`[%:=%])
def $subst_vectype(vectype, typevar*, heaptype*) : vectype             hint(show %`[%:=%])
def $subst_heaptype(heaptype, typevar*, heaptype*) : heaptype          hint(show %`[%:=%])
def $subst_reftype(reftype, typevar*, heaptype*) : reftype             hint(show %`[%:=%])
def $subst_valtype(valtype, typevar*, heaptype*) : valtype             hint(show %`[%:=%])

def $subst_packedtype(packedtype, typevar*, heaptype*) : packedtype    hint(show %`[%:=%])
def $subst_storagetype(storagetype, typevar*, heaptype*) : storagetype hint(show %`[%:=%])
def $subst_fieldtype(fieldtype, typevar*, heaptype*) : fieldtype       hint(show %`[%:=%])

def $subst_comptype(comptype, typevar*, heaptype*) : comptype          hint(show %`[%:=%])
def $subst_subtype(subtype, typevar*, heaptype*) : subtype             hint(show %`[%:=%])
def $subst_rectype(rectype, typevar*, heaptype*) : rectype             hint(show %`[%:=%])
def $subst_deftype(deftype, typevar*, heaptype*) : deftype             hint(show %`[%:=%])

def $subst_globaltype(globaltype, typevar*, heaptype*) : globaltype    hint(show %`[%:=%])
def $subst_functype(functype, typevar*, heaptype*) : functype          hint(show %`[%:=%])
def $subst_tabletype(tabletype, typevar*, heaptype*) : tabletype       hint(show %`[%:=%])
def $subst_memtype(memtype, typevar*, heaptype*) : memtype             hint(show %`[%:=%])

def $subst_externtype(externtype, typevar*, heaptype*) : externtype    hint(show %`[%:=%])


def $subst_typevar(xx, epsilon, epsilon) = xx
def $subst_typevar(xx, xx_1 xx'*, ht_1 ht'*) = ht_1                            -- if xx = xx_1
def $subst_typevar(xx, xx_1 xx'*, ht_1 ht'*) = $subst_typevar(xx, xx'*, ht'*)  -- otherwise

def $subst_numtype(nt, xx*, ht*) = nt
def $subst_vectype(vt, xx*, ht*) = vt

def $subst_heaptype(xx', xx*, ht*) = $subst_typevar(xx', xx*, ht*)
def $subst_heaptype(dt, xx*, ht*) = $subst_deftype(dt, xx*, ht*)
def $subst_heaptype(heaptype, xx*, ht*) = heaptype  -- otherwise

def $subst_reftype(REF nul ht, xx*, ht*) = REF nul $subst_heaptype(ht, xx*, ht*)

def $subst_valtype(nt, xx*, ht*) = $subst_numtype(nt, xx*, ht*)
def $subst_valtype(vt, xx*, ht*) = $subst_vectype(vt, xx*, ht*)
def $subst_valtype(rt, xx*, ht*) = $subst_reftype(rt, xx*, ht*)
def $subst_valtype(BOT, xx*, ht*) = BOT

def $subst_packedtype(pt, xx*, ht*) = pt

def $subst_storagetype(t, xx*, ht*) = $subst_valtype(t, xx*, ht*)
def $subst_storagetype(pt, xx*, ht*) = $subst_packedtype(pt, xx*, ht*)

def $subst_fieldtype(mut zt, xx*, ht*) = mut $subst_storagetype(zt, xx*, ht*)

def $subst_comptype(STRUCT yt*, xx*, ht*) = STRUCT $subst_fieldtype(yt, xx*, ht*)*
def $subst_comptype(ARRAY yt, xx*, ht*) = ARRAY $subst_fieldtype(yt, xx*, ht*)
def $subst_comptype(FUNC ft, xx*, ht*) = FUNC $subst_functype(ft, xx*, ht*)

def $subst_subtype(SUB fin y* ct, xx*, ht*) =
  SUBD fin $subst_heaptype(_IDX y, xx*, ht*)* $subst_comptype(ct, xx*, ht*)
def $subst_subtype(SUBD fin ht'* ct, xx*, ht*) =
  SUBD fin $subst_heaptype(ht', xx*, ht*)* $subst_comptype(ct, xx*, ht*)

def $subst_rectype(REC st*, xx*, ht*) = REC $subst_subtype(st, xx*, ht*)*

def $subst_deftype(DEF qt i, xx*, ht*) = DEF $subst_rectype(qt, xx*, ht*) i

def $subst_globaltype(mut t, xx*, ht*) = mut $subst_valtype(t, xx*, ht*)
def $subst_functype(t_1* -> t_2*, xx*, ht*) = $subst_valtype(t_1, xx*, ht*)* -> $subst_valtype(t_2, xx*, ht*)*
def $subst_memtype(lim I8, xx*, ht*) = lim I8
def $subst_tabletype(lim rt, xx*, ht*) = lim $subst_reftype(rt, xx*, ht*)

def $subst_externtype(FUNC dt, xx*, ht*) = FUNC $subst_deftype(dt, xx*, ht*)
def $subst_externtype(GLOBAL gt, xx*, ht*) = GLOBAL $subst_globaltype(gt, xx*, ht*)
def $subst_externtype(TABLE tt, xx*, ht*) = TABLE $subst_tabletype(tt, xx*, ht*)
def $subst_externtype(MEM mt, xx*, ht*) = MEM $subst_memtype(mt, xx*, ht*)


def $subst_all(deftype, heaptype*) : deftype  hint(show %`[:=%])
def $subst_all(dt, ht^n) = $subst_deftype(dt, (_IDX x)^n, ht^n)
  -- if x^n = $enum(n)


;; Rolling and Unrolling

def $rollrt(typeidx, rectype) : rectype  hint(show $roll_%(%))
def $unrollrt(rectype) : rectype         hint(show $unroll(%))
def $rolldt(typeidx, rectype) : deftype* hint(show $roll_%*(%))
def $unrolldt(deftype) : subtype         hint(show $unroll(%))
def $expanddt(deftype) : comptype        hint(show $expand(%))

def $rollrt(x, REC st^n) = REC ($subst_subtype(st, (_IDX $(x + i))^n, (REC i)^n))^n
  -- if i^n = $enum(n)
def $unrollrt(REC st^n) = REC ($subst_subtype(st, (REC i)^n, (DEF (REC st^n) i)^n))^n
  -- if i^n = $enum(n)

def $rolldt(x, qt) = (DEF (REC st^n) i)^n      -- if $rollrt(x, qt) = REC st^n -- if i^n = $enum(n)
def $unrolldt(DEF qt i) = st*[i]               -- if $unrollrt(qt) = REC st*

def $expanddt(dt) = ct                         -- if $unrolldt(dt) = SUBD fin ht* ct

relation Expand: deftype ~~ comptype
rule Expand: dt ~~ ct                          -- if $expanddt(dt) = ct


;; Projections

def $funcs(externtype*) : deftype*
def $globals(externtype*) : globaltype*
def $tables(externtype*) : tabletype*
def $mems(externtype*) : memtype*

def $funcs(epsilon) = epsilon
def $funcs((FUNC dt) et*) = dt $funcs(et*)
def $funcs(externtype et*) = $funcs(et*)  -- otherwise

def $globals(epsilon) = epsilon
def $globals((GLOBAL gt) et*) = gt $globals(et*)
def $globals(externtype et*) = $globals(et*)  -- otherwise

def $tables(epsilon) = epsilon
def $tables((TABLE tt) et*) = tt $tables(et*)
def $tables(externtype et*) = $tables(et*)  -- otherwise

def $mems(epsilon) = epsilon
def $mems((MEM mt) et*) = mt $mems(et*)
def $mems(externtype et*) = $mems(et*)  -- otherwise
