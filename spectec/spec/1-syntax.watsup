;;
;; Names
;;

syntax name hint(desc "name") = text


;;
;; Values
;;

syntax byte hint(desc "byte") = nat  ;; TODO
syntax i31 hint(desc "31-bit integer") = nat  ;; TODO
syntax i32 hint(desc "32-bit integer") = nat  ;; TODO

var b : byte


;;
;; Indices
;;

syntax idx hint(desc "index") = nat
syntax typeidx hint(desc "type index") = idx
syntax funcidx hint(desc "function index") = idx
syntax globalidx hint(desc "global index") = idx
syntax tableidx hint(desc "table index") = idx
syntax memidx hint(desc "memory index") = idx
syntax elemidx hint(desc "elem index") = idx
syntax dataidx hint(desc "data index") = idx
syntax labelidx hint(desc "label index") = idx
syntax localidx hint(desc "local index") = idx

var x : idx
var y : idx
var l : labelidx


;;
;; Types
;;

;; Value types

syntax nul = NULL?

syntax numtype hint(desc "number type") =
  | I32 | I64 | F32 | F64

syntax vectype hint(desc "vector type") =
  | V128

syntax absheaptype hint(desc "abstract heap type") =
  | ANY | EQ | I31 | STRUCT | ARRAY | NONE
  | FUNC | NOFUNC
  | EXTERN | NOEXTERN
  | ...
syntax absheaptype =
  | ... | BOT
syntax heaptype hint(desc "heap type") =
  | absheaptype
  | _IDX typeidx
  | ...

syntax reftype hint(desc "reference type") =
  | REF nul heaptype

syntax valtype hint(desc "value type") =
  | numtype | vectype | reftype | ...
syntax valtype =
  | ... | BOT

syntax in hint(show I#n) = | I32 | I64
syntax fn hint(show F#n) = | F32 | F64


syntax resulttype hint(desc "result type") =
  valtype*


;; Type definitions

syntax mut = MUT?
syntax fin = FINAL?

syntax packedtype hint(desc "packed type") =
  | I8 | I16

syntax storagetype hint(desc "storage type") =
  | valtype | packedtype

syntax fieldtype hint(desc "field type") =
  mut storagetype

syntax functype hint(desc "function type") =
  resulttype -> resulttype

syntax comptype hint(desc "composite type") =
  | STRUCT fieldtype*
  | ARRAY fieldtype
  | FUNC functype

syntax subtype hint(desc "sub type") =
  | SUB fin typeidx* comptype | ...
syntax subtype =
  | ...
  | SUBD fin heaptype* comptype

syntax rectype hint(desc "recursive type") =
  | REC subtype*

syntax deftype hint(desc "defined type") =
  | DEF rectype nat hint(show %.%)

syntax heaptype =
  | ...
  | deftype
  | REC nat


;; External types

syntax limits hint(desc "limits") =
  `[i32 .. i32]
syntax globaltype hint(desc "global type") =
  mut valtype
syntax tabletype hint(desc "table type") =
  limits reftype
syntax memtype hint(desc "memory type") =
  limits I8
syntax elemtype hint(desc "element type") =
  reftype
syntax datatype hint(desc "data type") =
  OK
syntax externtype hint(desc "external type") =
  | FUNC deftype | GLOBAL globaltype | TABLE tabletype | MEM memtype



;; Meta variables

var lim : limits

var t : valtype
;; var bt : blocktype  ;; defined below
var ct : comptype
var dt : deftype
var et : externtype
var ft : functype
var gt : globaltype
var ht : heaptype
;; var it : instrtype  ;; defined in typing
;; kt : conttype       ;; future extension
;; var lt : localtype  ;; defined in typing
var mt : memtype
var nt : numtype
var pt : packedtype
var qt : rectype       ;; TODO: better choice?
var rt : reftype
var st : subtype
var tt : tabletype
var vt : vectype
var xt : externtype
var yt : fieldtype     ;; TODO: better choice?
var zt : storagetype


;;
;; Operators
;;

syntax sx hint(desc "signedness") = | U | S

syntax unop_IXX = | CLZ | CTZ | POPCNT
syntax unop_FXX = | ABS | NEG | SQRT | CEIL | FLOOR | TRUNC | NEAREST

syntax binop_IXX =
  | ADD | SUB | MUL | DIV sx hint(show DIV_#%) | REM sx hint(show REM_#%)
  | AND | OR | XOR | SHL | SHR sx hint(show SHR_#%) | ROTL | ROTR
syntax binop_FXX = | ADD | SUB | MUL | DIV | MIN | MAX | COPYSIGN

syntax testop_IXX = | EQZ
syntax testop_FXX = |      ;; uninhabited

syntax relop_IXX =
  | EQ | NE | LT sx hint(show LT_#%) | GT sx hint(show GT_#%) | LE sx hint(show LE_#%) | GE sx hint(show GE_#%)
syntax relop_FXX = | EQ | NE | LT | GT | LE | GE

syntax unop_numtype = | _I unop_IXX | _F unop_FXX
syntax binop_numtype = | _I binop_IXX | _F binop_FXX
syntax testop_numtype = | _I testop_IXX | _F testop_FXX
syntax relop_numtype = | _I relop_IXX | _F relop_FXX
syntax cvtop = | CONVERT | REINTERPRET

var unop : unop_numtype
var binop : binop_numtype
var testop : testop_numtype
var relop : relop_numtype


;;
;; Instructions
;;

syntax c_numtype = nat  ;; TODO
syntax c_vectype = nat  ;; TODO
var c : c_numtype

syntax blocktype hint(desc "block type") = functype  ;; TODO
var bt : blocktype

syntax instr/control hint(desc "control instruction") =
  | UNREACHABLE
  | NOP
  | DROP
  | SELECT valtype?
  | BLOCK blocktype instr*
  | LOOP blocktype instr*
  | IF blocktype instr* ELSE instr*
  | BR labelidx
  | BR_IF labelidx
  | BR_TABLE labelidx* labelidx
  | BR_ON_NULL labelidx
  | BR_ON_NON_NULL labelidx
  | BR_ON_CAST labelidx reftype reftype
  | BR_ON_CAST_FAIL labelidx reftype reftype
  | CALL funcidx
  | CALL_REF typeidx
  | CALL_INDIRECT tableidx typeidx
  | RETURN
  | RETURN_CALL funcidx
  | RETURN_CALL_REF typeidx
  | RETURN_CALL_INDIRECT tableidx typeidx
  | ...

syntax instr/numeric hint(desc "numeric instruction") = ...
  | CONST numtype c_numtype          hint(show %.CONST %)
  | UNOP numtype unop_numtype        hint(show %.%)
  | BINOP numtype binop_numtype      hint(show %.%)
  | TESTOP numtype testop_numtype    hint(show %.%)
  | RELOP numtype relop_numtype      hint(show %.%)
  | EXTEND numtype n                 hint(show %.EXTEND#%)
  | CVTOP numtype cvtop numtype sx?  hint(show %.%#_#%#_#%)
  | ...

syntax instr/reference hint(desc "reference instruction") = ...
  | REF.NULL heaptype
  | REF.I31
  | REF.FUNC funcidx
  | REF.IS_NULL
  | REF.AS_NON_NULL
  | REF.EQ
  | REF.TEST reftype
  | REF.CAST reftype
  | ...

syntax instr/heap hint(desc "heap instruction") = ...
  | I31.GET sx                      hint(show I31.GET#_#%)
  | STRUCT.NEW typeidx
  | STRUCT.NEW_DEFAULT typeidx
  | STRUCT.GET sx? typeidx i32      hint(show STRUCT.GET#_#% % %)
  | STRUCT.SET typeidx i32
  | ARRAY.NEW typeidx
  | ARRAY.NEW_DEFAULT typeidx
  | ARRAY.NEW_FIXED typeidx nat
  | ARRAY.NEW_DATA typeidx dataidx
  | ARRAY.NEW_ELEM typeidx elemidx
  | ARRAY.GET sx? typeidx           hint(show ARRAY.GET#_#% %)
  | ARRAY.SET typeidx
  | ARRAY.LEN
  | ARRAY.FILL typeidx
  | ARRAY.COPY typeidx typeidx
  | ARRAY.INIT_DATA typeidx dataidx
  | ARRAY.INIT_ELEM typeidx elemidx
  | EXTERN.INTERNALIZE
  | EXTERN.EXTERNALIZE
  | ...

syntax instr/state hint(desc "state instruction") = ...
  | LOCAL.GET localidx
  | LOCAL.SET localidx
  | LOCAL.TEE localidx
  | GLOBAL.GET globalidx
  | GLOBAL.SET globalidx
  | TABLE.GET tableidx
  | TABLE.SET tableidx
  | TABLE.SIZE tableidx
  | TABLE.GROW tableidx
  | TABLE.FILL tableidx
  | TABLE.COPY tableidx tableidx
  | TABLE.INIT tableidx elemidx
  | ELEM.DROP elemidx
  | MEMORY.SIZE memidx
  | MEMORY.GROW memidx
  | MEMORY.FILL memidx
  | MEMORY.COPY memidx memidx
  | MEMORY.INIT memidx dataidx
  | DATA.DROP dataidx
  | LOAD numtype (n _ sx)? memidx i32 i32  hint(show %.LOAD % %)  hint(show %.LOAD#% % % %)
  | STORE numtype n? memidx i32 i32        hint(show %.STORE % %) hint(show %.STORE#% % % %)

syntax expr hint(desc "expression") =
  instr*

syntax instr hint(desc "instruction")


;;
;; Modules
;;

syntax elemmode = | TABLE tableidx expr | DECLARE
syntax datamode = | MEMORY memidx expr

syntax type hint(desc "type definition") =
  TYPE rectype
syntax local hint(desc "local") =
  LOCAL valtype
syntax func hint(desc "function") =
  FUNC typeidx local* expr
syntax global hint(desc "global") =
  GLOBAL globaltype expr
syntax table hint(desc "table") =
  TABLE tabletype expr
syntax mem hint(desc "memory") =
  MEMORY memtype
syntax elem hint(desc "table segment") =
  ELEM reftype expr* elemmode?
syntax data hint(desc "memory segment") =
  DATA byte* datamode?
syntax start hint(desc "start function") =
  START funcidx

syntax externuse hint(desc "external use") =
  | FUNC funcidx | GLOBAL globalidx | TABLE tableidx | MEM memidx
syntax export hint(desc "export") =
  EXPORT name externuse
syntax import hint(desc "import") =
  IMPORT name name externtype

syntax module hint(desc "module") =
  MODULE type* import* func* global* table* mem* elem* data* start? export*
