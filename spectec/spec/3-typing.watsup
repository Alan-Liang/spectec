;;
;; Contexts
;;

syntax context hint(desc "context") =
  { FUNC functype*, GLOBAL globaltype*, TABLE tabletype*, MEM memtype*,
    ELEM elemtype*, DATA datatype*,
    LOCAL valtype*, LABEL resulttype*, RETURN resulttype? }

var C : context



;;
;; Types
;;

relation Limits_ok: |- limits : nat         hint(show "K-limits")
relation Functype_ok: |- functype : OK      hint(show "K-func")
relation Globaltype_ok: |- globaltype : OK  hint(show "K-global")
relation Tabletype_ok: |- tabletype : OK    hint(show "K-table")
relation Memtype_ok: |- memtype : OK        hint(show "K-mem")
relation Externtype_ok: |- externtype : OK  hint(show "K-extern")


rule Limits_ok:
  |- `[n_1 .. n_2] : k
  -- if n_1 <= n_2 <= k

rule Functype_ok:
  |- ft : OK

rule Globaltype_ok:
  |- gt : OK

rule Tabletype_ok:
  |- lim rt : OK
  -- Limits_ok: |- lim : $(2^32-1)

rule Memtype_ok:
  |- lim I8 : OK
  -- Limits_ok: |- lim : $(2^16)


rule Externtype_ok/func:
  |- FUNC functype : OK
  -- Functype_ok: |- functype : OK

rule Externtype_ok/global:
  |- GLOBAL globaltype : OK
  -- Globaltype_ok: |- globaltype : OK

rule Externtype_ok/table:
  |- TABLE tabletype : OK
  -- Tabletype_ok: |- tabletype : OK

rule Externtype_ok/mem:
  |- MEM memtype : OK
  -- Memtype_ok: |- memtype : OK



;;
;; Subtyping
;;

;; Value types

relation Valtype_sub: |- valtype <: valtype       hint(show "S")
relation Resulttype_sub: |- valtype* <: valtype*  hint(show "S-result")

rule Valtype_sub/refl:
  |- t <: t

rule Valtype_sub/bot:
  |- BOT <: t

rule Resulttype_sub:
  |- t_1* <: t_2*
  -- (Valtype_sub: |- t_1 <: t_2)*


;; External types

relation Limits_sub: |- limits <: limits             hint(show "S-limits")
relation Functype_sub: |- functype <: functype       hint(show "S-func")
relation Globaltype_sub: |- globaltype <: globaltype hint(show "S-global")
relation Tabletype_sub: |- tabletype <: tabletype    hint(show "S-table")
relation Memtype_sub: |- memtype <: memtype          hint(show "S-mem")
relation Externtype_sub: |- externtype <: externtype hint(show "S-extern")


rule Limits_sub:
  |- `[n_11 .. n_12] <: `[n_21 .. n_22]
  -- if n_11 >= n_21
  -- if n_12 <= n_22

rule Functype_sub:
  |- ft <: ft

rule Globaltype_sub:
  |- gt <: gt

rule Tabletype_sub:
  |- lim_1 rt <: lim_2 rt
  -- Limits_sub: |- lim_1 <: lim_2

rule Memtype_sub:
  |- lim_1 I8 <: lim_2 I8
  -- Limits_sub: |- lim_1 <: lim_2


rule Externtype_sub/func:
  |- FUNC ft_1 <: FUNC ft_2
  -- Functype_sub: |- ft_1 <: ft_2

rule Externtype_sub/global:
  |- GLOBAL gt_1 <: GLOBAL gt_2
  -- Globaltype_sub: |- gt_1 <: gt_2

rule Externtype_sub/table:
  |- TABLE tt_1 <: TABLE tt_2
  -- Tabletype_sub: |- tt_1 <: tt_2

rule Externtype_sub/mem:
  |- MEM mt_1 <: MEM mt_2
  -- Memtype_sub: |- mt_1 <: mt_2



;;
;; Instructions
;;

;; TODO: move elsewhere
syntax instrtype hint(desc "instruction type") =
  resulttype -> localidx* resulttype   hint(show % ->_% %)

var it : instrtype

relation Instr_ok: context |- instr : functype      hint(show "T")
relation InstrSeq_ok: context |- instr* : instrtype hint(show "T*")
relation Expr_ok: context |- expr : resulttype      hint(show "T-expr")


;; Expressions

rule Expr_ok:
  C |- instr* : t*
  -- InstrSeq_ok: C |- instr* : epsilon ->(epsilon) t*


;; Instruction sequences

rule InstrSeq_ok/empty:
  C |- epsilon : epsilon ->(epsilon) epsilon

rule InstrSeq_ok/seq:
  C |- instr_1 instr_2* : t_1* ->(x_1* x_2*) t_3*
  -- if (C.LOCALS[x_1] = init t)*
  -- if (C' = C[(x_1 := SET t)*])
  -- Instr_ok: C |- instr_1 : t_1* ->(x_1*) t_2*
  -- InstrSeq_ok: C' |- instr_2* : t_2* ->(x_2*) t_3*

rule InstrSeq_ok/sub:
  C |- instr* : it'
  -- InstrSeq_ok: C |- instr* : it
  -- Instrtype_sub: |- it* <: it'*

rule InstrSeq_ok/frame:
  C |- instr* : t* t_1* ->(x*) t* t_2*
  -- InstrSeq_ok: C |- instr* : t_1* ->(x*) t_2*


;; TODO: move elsewhere
relation Instrtype_sub: context |- instrtype <: instrtype

rule Instrtype_sub:
  C |- t_11* ->(x_1*) t_12* <: t_21* ->(x_2*) t_22*
  -- Resulttype_sub: C |- t_21* <: t_11*
  -- Resulttype_sub: C |- t_12* <: t_22*
  -- if {x*} = {x_2*}\{x_1*}
  -- if (C.LOCALS[x] = SET t)*


;; Polymorphic instructions

rule Instr_ok/unreachable:
  C |- UNREACHABLE : t_1* -> t_2*

rule Instr_ok/nop:
  C |- NOP : epsilon -> epsilon

rule Instr_ok/drop:
  C |- DROP : t -> epsilon


rule Instr_ok/select-expl:
  C |- SELECT t : t t I32 -> t

rule Instr_ok/select-impl:
  C |- SELECT : t t I32 -> t
  -- Valtype_sub: |- t <: t'
  -- if t' = numtype \/ t' = vectype


;; Block instructions

relation Blocktype_ok: context |- blocktype : functype hint(show "K-block")

rule Blocktype_ok:
  C |- ft : ft
  -- Functype_ok: |- ft : OK

rule Instr_ok/block:
  C |- BLOCK bt instr* : t_1* -> t_2*
  -- Blocktype_ok: C |- bt : t_1* -> t_2*
  -- InstrSeq_ok: C, LABEL (t_2*) |- instr* : t_1* -> t_2*

rule Instr_ok/loop:
  C |- LOOP bt instr* : t_1* -> t_2*
  -- Blocktype_ok: C |- bt : t_1* -> t_2*
  -- InstrSeq_ok: C, LABEL (t_1*) |- instr* : t_1* -> t_2*

rule Instr_ok/if:
  C |- IF bt instr_1* ELSE instr_2* : t_1* I32 -> t_2*
  -- Blocktype_ok: C |- bt : t_1* -> t_2*
  -- InstrSeq_ok: C, LABEL (t_2*) |- instr_1* : t_1* -> t_2*
  -- InstrSeq_ok: C, LABEL (t_2*) |- instr_2* : t_1* -> t_2*


;; Branch instructions

rule Instr_ok/br:
  C |- BR l : t_1* t* -> t_2*
  -- if C.LABEL[l] = t*

rule Instr_ok/br_if:
  C |- BR_IF l : t* I32 -> t*
  -- if C.LABEL[l] = t*

rule Instr_ok/br_table:
  C |- BR_TABLE l* l' : t_1* t* -> t_2*
  -- (Resulttype_sub: |- t* <: C.LABEL[l])*
  -- Resulttype_sub: |- t* <: C.LABEL[l']

rule Instr_ok/br_on_null:
  C |- BR_ON_NULL l : t* (REF NULL ht) -> t* (REF ht)
  -- if C.LABEL[l] = t*
  -- Heaptype_ok: C |- ht : OK

rule Instr_ok/br_on_non_null:
  C |- BR_ON_NON_NULL l : t* (REF NULL ht) -> t*
  -- if C.LABEL[l] = t* (REF ht)
  -- Heaptype_ok: C |- ht : OK


;; Function instructions

rule Instr_ok/return:
  C |- RETURN : t_1* t* -> t_2*
  -- if C.RETURN = t*

rule Instr_ok/call:
  C |- CALL x : t_1* -> t_2*
  -- if C.FUNC[x] = t_1* -> t_2*

rule Instr_ok/call_ref:
  C |- CALL_REF x : t_1* (REF NULL x) -> t_2*
  -- if C.TYPES[x] ~ FUNC (t_1* -> t_2*)

rule Instr_ok/call_indirect:
  C |- CALL_INDIRECT x y : t_1* I32 -> t_2*
  -- if C.TABLE[x] = lim rt
  -- Reftype_sub: C |- rt <: (REF NULL FUNC)
  -- C.TYPES[y] ~ FUNC (t_1* -> t_2*)

rule Instr_ok/return_call:
  C |- RETURN_CALL x : t_3* t_1* -> t_4*
  -- if C.FUNC[x] = t_1* -> t_2*
  -- Resulttype_sub: C |- t_2* <: C.RETURN

rule Instr_ok/return_call_ref:
  C |- RETURN_CALL_REF x : t_3* t_1* (REF NULL x) -> t_4*
  -- if C.TYPES[x] ~ FUNC (t_1* -> t_2*)
  -- Resulttype_sub: C |- t_2* <: C.RETURN

rule Instr_ok/return_call_indirect:
  C |- RETURN_CALL_INDIRECT x y : t_3* t_1* I32 -> t_4*
  -- if C.TABLE[x] = lim rt
  -- Reftype_sub: C |- rt <: (REF NULL FUNC)
  -- C.TYPES[y] ~ FUNC (t_1* -> t_2*)
  -- Resulttype_sub: C |- t_2* <: C.RETURN


;; Numeric instructions

rule Instr_ok/const:
  C |- CONST nt c_nt : epsilon -> nt

rule Instr_ok/unop:
  C |- UNOP nt unop : nt -> nt

rule Instr_ok/binop:
  C |- BINOP nt binop : nt nt -> nt

rule Instr_ok/testop:
  C |- TESTOP nt testop : nt -> I32

rule Instr_ok/relop:
  C |- RELOP nt relop : nt nt -> I32


rule Instr_ok/extend:
  C |- EXTEND nt n : nt -> nt
  -- if n <= $size(nt)

rule Instr_ok/reinterpret:
  C |- CVTOP nt_1 REINTERPRET nt_2 : nt_2 -> nt_1
  -- if nt_1 =/= nt_2
  -- if $size(nt_1) = $size(nt_2)

rule Instr_ok/convert-i:
  C |- CVTOP in_1 CONVERT in_2 sx? : in_2 -> in_1
  -- if in_1 =/= in_2
  -- if sx? = epsilon <=> $size(in_1) > $size(in_2)

rule Instr_ok/convert-f:
  C |- CVTOP fn_1 CONVERT fn_2 : fn_2 -> fn_1
  -- if fn_1 =/= fn_2


;; Reference instructions

rule Instr_ok/ref.null:
  C |- REF.NULL ht : epsilon -> (REF NULL ht)
  -- Heaptype_ok: C |- ht : OK

;; TODO: need type index
rule Instr_ok/ref.func:
  C |- REF.FUNC x : epsilon -> (REF dt)
  -- if C.FUNC[x] = dt

rule Instr_ok/ref.i31:
  C |- REF.I31 : I31 -> (REF I31)

rule Instr_ok/ref.is_null:
  C |- REF.IS_NULL : rt -> I32

rule Instr_ok/ref.as_non_null:
  C |- REF.AS_NON_NULL : (REF NULL ht) -> (REF ht)
  -- Heaptype_ok: C |- ht : OK

rule Instr_ok/ref.eq:
  C |- REF.EQ : (REF NULL EQ) (REF NULL EQ) -> I32

rule Instr_ok/ref.test:
  C |- REF.TEST rt : rt' -> I32
  -- Reftype_ok: C |- rt : OK
  -- Reftype_ok: C |- rt' : OK
  -- Reftype_sub: C |- rt <: rt'

rule Instr_ok/ref.cast:
  C |- REF.CAST rt : rt' -> rt
  -- Reftype_ok: C |- rt : OK
  -- Reftype_ok: C |- rt' : OK
  -- Reftype_sub: C |- rt <: rt'


;; Scalar reference instructions

rule Instr_ok/i31.get:
  C |- I31.GET sx : (REF NULL I31) -> I32


;; Structure instructions

rule Instr_ok/struct.new:
  C |- STRUCT.NEW x : $unpacktype(gt)* -> (REF x)
  -- if C.LOCALS[x] ~ STRUCT (mut gt)*

rule Instr_ok/struct.new_default:
  C |- STRUCT.NEW_DEFAULT x : $unpacktype(gt)* -> (REF x)
  -- if C.LOCALS[x] ~ STRUCT (mut gt)*
  -- if ($default($unpacktype(gt)) = val)*

rule Instr_ok/struct.get:
  C |- STRUCT.GET sx? x i : (REF NULL x) -> $unpacktype(gt)
  -- if C.LOCALS[x] ~ STRUCT ht*
  -- if ht*[i] = mut gt
  -- if sx? = epsilon <=> $unpacktype(gt) = gt

rule Instr_ok/struct.set:
  C |- STRUCT.SET x i : (REF NULL x) $unpacktype(gt) -> epsilon
  -- if C.LOCALS[x] ~ STRUCT ht*
  -- if ht*[i] = VAR gt


;; Array instructions

rule Instr_ok/array.new:
  C |- ARRAY.NEW x : $unpacktype(gt) I32 -> (REF x)
  -- if C.LOCALS[x] ~ ARRAY (mut gt)

rule Instr_ok/array.new_default:
  C |- ARRAY.NEW_DEFAULT x : I32 -> (REF x)
  -- if C.LOCALS[x] ~ ARRAY (mut gt)
  -- if $default($unpacktype(gt)) = val

rule Instr_ok/array.new_fixed:
  C |- ARRAY.NEW_FIXED x n : $unpacktype(gt) -> (REF x)
  -- if C.LOCALS[x] ~ ARRAY (mut gt)

rule Instr_ok/array.new_elem:
  C |- ARRAY.NEW_ELEM x y : I32 I32 -> (REF x)
  -- if C.LOCALS[x] ~ ARRAY (mut rt)
  -- Reftype_sub: C |- C.ELEMS[y] <: rt

rule Instr_ok/array.new_data:
  C |- ARRAY.NEW_DATA x y : I32 I32 -> (REF x)
  -- if C.LOCALS[x] ~ ARRAY (mut t)
  -- if t = numtype \/ t = vectype
  -- if C.DATAS[y] = OK

rule Instr_ok/array.get:
  C |- ARRAY.GET sx? x : (REF NULL x) I32 -> $unpacktype(gt)
  -- if C.LOCALS[x] ~ ARRAY (mut gt)
  -- if sx? = epsilon <=> $unpacktype(gt) = gt

rule Instr_ok/array.set:
  C |- ARRAY.SET x i : (REF NULL x) I32 $unpacktype(gt) -> epsilon
  -- if C.LOCALS[x] ~ ARRAY (VAR gt)

rule Instr_ok/array.len:
  C |- ARRAY.LEN : (REF NULL ARRAY) -> I32
  -- if C.LOCALS[x] ~ ARRAY (VAR gt)

rule Instr_ok/array.fill:
  C |- ARRAY.FILL x : (REF NULL x) I32 $unpacktype(gt) I32 -> epsilon
  -- if C.LOCALS[x] ~ ARRAY (VAR gt)

rule Instr_ok/array.copy:
  C |- ARRAY.COPY x_1 x_2 : (REF NULL x_1) I32 (REF NULL x_2) I32 I32 -> epsilon
  -- if C.LOCALS[x_1] ~ ARRAY (VAR gt_1)
  -- if C.LOCALS[x_2] ~ ARRAY (mut gt_2)
  -- Storagetype_sub: C |- gt_2 <: gt_1

rule Instr_ok/array.init_elem:
  C |- ARRAY.INIT_ELEM x y : (REF NULL x) I32 I32 I32 -> epsilon
  -- if C.LOCALS[x] ~ ARRAY (VAR gt)
  -- Storagetype_sub: C |- C.ELEMS[y] <: gt

rule Instr_ok/array.init_data:
  C |- ARRAY.INIT_DATA x y : (REF NULL x) I32 I32 I32 -> epsilon
  -- if C.LOCALS[x] ~ ARRAY (VAR gt)
  -- if t = numtype \/ t = vectype
  -- if C.DATAS[y] = OK


;; External reference instructions

rule Instr_ok/extern.externalize:
  C |- EXTERN.EXTERNALIZE : (REF NULL_1? ANY) -> (REF NULL_2? EXTERN)
  -- if NULL_1? = NULL_2?

rule Instr_ok/extern.internalize:
  C |- EXTERN.INTERNALIZE : (REF NULL_1? EXTERN) -> (REF NULL_2? ANY)
  -- if NULL_1? = NULL_2?


;; Local instructions

rule Instr_ok/local.get:
  C |- LOCAL.GET x : epsilon -> t
  -- if C.LOCAL[x] = init t

;; TODO: InstrEff_ok?
rule InstrEff_ok/local.set:
  C |- LOCAL.SET x : t ->(x) epsilon
  -- if C.LOCAL[x] = init t

rule InstrEff_ok/local.tee:
  C |- LOCAL.TEE x : t ->(x) t
  -- if C.LOCAL[x] = init t


;; Global instructions

rule Instr_ok/global.get:
  C |- GLOBAL.GET x : epsilon -> t
  -- if C.GLOBAL[x] = MUT? t

rule Instr_ok/global.set:
  C |- GLOBAL.SET x : t -> epsilon
  -- if C.GLOBAL[x] = MUT t


;; Table instructions

rule Instr_ok/table.get:
  C |- TABLE.GET x : I32 -> rt
  -- if C.TABLE[x] = lim rt

rule Instr_ok/table.set:
  C |- TABLE.SET x : I32 rt -> epsilon
  -- if C.TABLE[x] = lim rt

rule Instr_ok/table.size:
  C |- TABLE.SIZE x : epsilon -> I32
  -- if C.TABLE[x] = tt

rule Instr_ok/table.grow:
  C |- TABLE.GROW x : rt I32 -> I32
  -- if C.TABLE[x] = lim rt

rule Instr_ok/table.fill:
  C |- TABLE.FILL x : I32 rt I32 -> epsilon
  -- if C.TABLE[x] = lim rt

rule Instr_ok/table.copy:
  C |- TABLE.COPY x_1 x_2 : I32 I32 I32 -> epsilon
  -- if C.TABLE[x_1] = lim_1 rt_1
  -- if C.TABLE[x_2] = lim_2 rt_2
  -- Reftype_sub: C |- rt_2 <: rt_1

rule Instr_ok/table.init:
  C |- TABLE.INIT x y : I32 I32 I32 -> epsilon
  -- if C.TABLE[x] = lim rt_1
  -- if C.ELEM[y] = rt_2
  -- Reftype_sub: C |- rt_2 <: rt_1

rule Instr_ok/elem.drop:
  C |- ELEM.DROP x : epsilon -> epsilon
  -- if C.ELEM[x] = rt


;; Memory instructions

rule Instr_ok/memory.size:
  C |- MEMORY.SIZE x : epsilon -> I32
  -- if C.MEM[x] = mt

rule Instr_ok/memory.grow:
  C |- MEMORY.GROW x : I32 -> I32
  -- if C.MEM[x] = mt

rule Instr_ok/memory.fill:
  C |- MEMORY.FILL x : I32 I32 I32 -> epsilon
  -- if C.MEM[x] = mt

rule Instr_ok/memory.copy:
  C |- MEMORY.COPY x_1 x_2 : I32 I32 I32 -> epsilon
  -- if C.MEM[x_1] = mt_1
  -- if C.MEM[x_2] = mt_2

rule Instr_ok/memory.init:
  C |- MEMORY.INIT x y : I32 I32 I32 -> epsilon
  -- if C.MEM[x] = mt
  -- if C.DATA[y] = OK

rule Instr_ok/data.drop:
  C |- DATA.DROP x : epsilon -> epsilon
  -- if C.DATA[x] = OK

rule Instr_ok/load:
  C |- LOAD nt (n _ sx)? x n_A n_O : I32 -> nt
  -- if C.MEM[x] = mt
  -- if $(2^(n_A) <= $size(nt)/8)
  -- if $(2^(n_A) <= n/8 < $size(nt)/8)?
  -- if n? = epsilon \/ nt = in

rule Instr_ok/store:
  C |- STORE nt n? x n_A n_O : I32 nt -> epsilon
  -- if C.MEM[x] = mt
  -- if $(2^(n_A) <= $size(nt)/8)
  -- if $(2^(n_A) <= n/8 < $size(nt)/8)?
  -- if n? = epsilon \/ nt = in


;;
;; Constant Expressions
;;

relation Instr_const: context |- instr CONST             hint(show "C-instr")
relation Expr_const: context |- expr CONST               hint(show "C-expr")
relation Expr_ok_const: context |- expr : valtype CONST  hint(show "TC-expr")

rule Instr_const/const:
  C |- (CONST nt c) CONST

rule Instr_const/ref.null:
  C |- (REF.NULL rt) CONST

rule Instr_const/ref.func:
  C |- (REF.FUNC x) CONST

rule Instr_const/global.get:
  C |- (GLOBAL.GET x) CONST
  -- if C.GLOBAL[x] = epsilon t


rule Expr_const: C |- instr* CONST
  -- (Instr_const: C |- instr CONST)*


rule Expr_ok_const:
  C |- expr : t CONST
  -- Expr_ok: C |- expr : t
  -- Expr_const: C |- expr CONST


;;
;; Modules
;;

relation Func_ok: context |- func : functype         hint(show "T-func")
relation Global_ok: context |- global : globaltype   hint(show "T-global")
relation Table_ok: context |- table : tabletype      hint(show "T-table")
relation Mem_ok: context |- mem : memtype            hint(show "T-mem")
relation Elem_ok: context |- elem : reftype          hint(show "T-elem")
relation Data_ok: context |- data : OK               hint(show "T-data")
relation Elemmode_ok: context |- elemmode : reftype  hint(show "T-elemmode")
relation Datamode_ok: context |- datamode : OK       hint(show "T-datamode")
relation Start_ok: context |- start : OK             hint(show "T-start")


;; Module definitions

rule Func_ok:
  C |- FUNC ft t* expr : ft
  -- if ft = t_1* -> t_2*
  -- Functype_ok: |- ft : OK
  -- Expr_ok: C, LOCAL t_1* t*, LABEL (t_2*), RETURN (t_2*) |- expr : t_2*

rule Global_ok:
  C |- GLOBAL gt expr : gt
  -- Globaltype_ok: |- gt : OK
  -- if gt = MUT? t
  -- Expr_ok_const: C |- expr : t CONST

rule Table_ok:
  C |- TABLE tt : tt
  -- Tabletype_ok: |- tt : OK

rule Mem_ok:
  C |- MEMORY mt : mt
  -- Memtype_ok: |- mt : OK

rule Elem_ok:
  C |- ELEM rt expr* elemmode? : rt
  -- (Expr_ok: C |- expr : rt)*
  -- (Elemmode_ok: C |- elemmode : rt)?

rule Data_ok:
  C |- DATA b* datamode? : OK
  -- (Datamode_ok: C |- datamode : OK)?

rule Elemmode_ok/active:
  C |- TABLE x expr : rt
  -- if C.TABLE[x] = lim rt
  -- (Expr_ok_const: C |- expr : I32 CONST)*

rule Elemmode_ok/declare:
  C |- DECLARE : rt

rule Datamode_ok:
  C |- MEMORY 0 expr : OK
  -- if C.MEM[0] = mt
  -- (Expr_ok_const: C |- expr : I32 CONST)*

rule Start_ok:
  C |- START x : OK
  -- if C.FUNC[x] = epsilon -> epsilon


;; Module im/exports

relation Import_ok: context |- import : externtype        hint(show "T-import")
relation Export_ok: context |- export : externtype        hint(show "T-export")
relation Externuse_ok: context |- externuse : externtype  hint(show "T-externuse")

rule Import_ok:
  C |- IMPORT name_1 name_2 xt : xt
  -- Externtype_ok: |- xt : OK

rule Export_ok:
  C |- EXPORT name externuse : xt
  -- Externuse_ok: C |- externuse : xt

rule Externuse_ok/func:
  C |- FUNC x : FUNC ft
  -- if C.FUNC[x] = ft

rule Externuse_ok/global:
  C |- GLOBAL x : GLOBAL gt
  -- if C.GLOBAL[x] = gt

rule Externuse_ok/table:
  C |- TABLE x : TABLE tt
  -- if C.TABLE[x] = tt

rule Externuse_ok/mem:
  C |- MEM x : MEM mt
  -- if C.MEM[x] = mt


;; Modules proper

relation Module_ok: |- module : OK      hint(show "T-module")

rule Module_ok:
  |- MODULE import* func* global* table* mem* elem* data^n start? export* : OK
  ;; TODO: incremental contexts for globals
  -- if C = {FUNC ft*, GLOBAL gt*, TABLE tt*, MEM mt*, ELEM rt*, DATA OK^n}

  -- (Func_ok: C |- func : ft)*
  -- (Global_ok: C |- global : gt)*
  -- (Table_ok: C |- table : tt)*
  -- (Mem_ok: C |- mem : mt)*

  -- (Elem_ok: C |- elem : rt)*
  -- (Data_ok: C |- data : OK)^n
  -- (Start_ok: C |- start : OK)?

  -- if |mem*| <= 1
  ;; -- TODO: disjoint export names
