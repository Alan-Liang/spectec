;; Instructions

relation Step: config ~> config                 hint(show "E")
relation Step_pure: admininstr* ~> admininstr*  hint(show "E")
relation Step_read: config ~> admininstr*       hint(show "E")

rule Step/pure:
  z; instr*  ~>  z; instr'*
  -- Step_pure: instr* ~> instr'*

rule Step/read:
  z; instr*  ~>  z; instr'*
  -- Step_read: z; instr* ~> instr'*


rule Step_pure/unreachable:
  UNREACHABLE  ~>  TRAP

rule Step_pure/nop:
  NOP  ~>  epsilon

rule Step_pure/drop:
  val DROP  ~>  epsilon


rule Step_pure/select-true:
  val_1 val_2 (CONST I32 c) (SELECT t?)  ~>  val_1
  -- if c =/= 0

rule Step_pure/select-false:
  val_1 val_2 (CONST I32 c) (SELECT t?)  ~>  val_2
  -- if c = 0


rule Step_pure/block:
  val^k (BLOCK bt instr*)  ~>  (LABEL_ n `{epsilon} val^k instr*)
  -- if bt = t_1^k -> t_2^n

rule Step_pure/loop:
  val^k (LOOP bt instr*)  ~>  (LABEL_ k `{LOOP bt instr*} val^k instr*)
  -- if bt = t_1^k -> t_2^n

rule Step_pure/if-true:
  (CONST I32 c) (IF bt instr_1* ELSE instr_2*)  ~>  (BLOCK bt instr_1*)
  -- if c =/= 0

rule Step_pure/if-false:
  (CONST I32 c) (IF bt instr_1* ELSE instr_2*)  ~>  (BLOCK bt instr_2*)
  -- if c = 0


rule Step_pure/label-vals:
  (LABEL_ n `{instr*} val*)  ~>  val*


;; TODO: may want a label context instead of bubbling up
rule Step_pure/br-zero:
  (LABEL_ n `{instr'*} val'* val^n (BR 0) instr*)  ~>  val^n instr'*

rule Step_pure/br-succ:
  (LABEL_ n `{instr'*} val* (BR $(l+1)) instr*)  ~>  val* (BR l)


rule Step_pure/br_if-true:
  (CONST I32 c) (BR_IF l)  ~>  (BR l)
  -- if c =/= 0

rule Step_pure/br_if-false:
  (CONST I32 c) (BR_IF l)  ~>  epsilon
  -- if c = 0


rule Step_pure/br_table-lt:
  (CONST I32 i) (BR_TABLE l* l')  ~>  (BR l*[i])
  -- if i < |l*|

rule Step_pure/br_table-ge:
  (CONST I32 i) (BR_TABLE l* l')  ~>  (BR l')
  -- if i >= |l*|


rule Step_read/call:
  z; (CALL x)  ~>  (CALL_ADDR $funcaddr(z)[x])  ;; TODO

rule Step_read/call_indirect-call:
  z; (CONST I32 i) (CALL_INDIRECT x ft)  ~>  (CALL_ADDR a)
  -- if $table(z, x).ELEM[i] = (REF.FUNC_ADDR a)
  -- if $funcinst(z)[a].CODE = FUNC ft' t* instr*
  -- if ft = ft'

rule Step_read/call_indirect-trap:
  z; (CONST I32 i) (CALL_INDIRECT x ft)  ~>  TRAP
  -- otherwise

rule Step_read/call_addr:
  z; val^k (CALL_ADDR a)  ~>  (FRAME_ n `{f} (LABEL_ n `{epsilon} instr*))
  -- if $funcinst(z)[a] = {MODULE m, CODE func}
  -- if func = FUNC (t_1^k -> t_2^n) t* instr*
  -- if f = {LOCAL val^k ($default_(t))*, MODULE m}


rule Step_pure/frame-vals:
  (FRAME_ n `{f} val^n)  ~>  val^n

rule Step_pure/return-frame:
  (FRAME_ n `{f} val'* val^n RETURN instr*)  ~>  val^n

rule Step_pure/return-label:
  (LABEL_ k `{instr'*} val* RETURN instr*)  ~>  val* RETURN


rule Step_pure/unop-val:
  (CONST nt c_1) (UNOP nt unop)  ~>  (CONST nt c)
  -- if $unop(unop, nt, c_1) = c  ;; TODO

rule Step_pure/unop-trap:
  (CONST nt c_1) (UNOP nt unop)  ~>  TRAP
  -- if $unop(unop, nt, c_1) = epsilon  ;; TODO


rule Step_pure/binop-val:
  (CONST nt c_1) (CONST nt c_2) (BINOP nt binop)  ~>  (CONST nt c)
  -- if $binop(binop, nt, c_1, c_2) = c  ;; TODO

rule Step_pure/binop-trap:
  (CONST nt c_1) (CONST nt c_2) (BINOP nt binop)  ~>  TRAP
  -- if $binop(binop, nt, c_1, c_2) = epsilon  ;; TODO


rule Step_pure/testop:
  (CONST nt c_1) (TESTOP nt testop)  ~>  (CONST I32 c)
  -- if c = $testop(testop, nt, c_1)

rule Step_pure/relop:
  (CONST nt c_1) (CONST nt c_2) (RELOP nt relop)  ~>  (CONST I32 c)
  -- if c = $relop(relop, nt, c_1, c_2)


rule Step_pure/extend:
  (CONST nt c) (EXTEND nt n)  ~>  (CONST nt $ext(n, $size(nt), S, c))


rule Step_pure/cvtop-val:
  (CONST nt_1 c_1) (CVTOP nt_2 cvtop nt_1 sx?)  ~>  (CONST nt_2 c)
  -- if $cvtop(nt_1, cvtop, nt_2, sx?, c_1) = c  ;; TODO

rule Step_pure/cvtop-trap:
  (CONST nt_1 c_1) (CVTOP nt_2 cvtop nt_1 sx?)  ~>  TRAP
  -- if $cvtop(nt_1, cvtop, nt_2, sx?, c_1) = epsilon  ;; TODO


rule Step_read/ref.func:
  z; (REF.FUNC x) ~> (REF.FUNC_ADDR $funcaddr(z)[x])


rule Step_pure/ref.is_null-true:
  val REF.IS_NULL  ~>  (CONST I32 1)
  -- if val = (REF.NULL rt)

rule Step_pure/ref.is_null-false:
  val REF.IS_NULL  ~>  (CONST I32 0)
  -- otherwise


rule Step_read/local.get:
  z; (LOCAL.GET x)  ~>  $local(z, x)

rule Step/local.set:
  z; val (LOCAL.SET x)  ~>  $with_local(z, x, val); epsilon

rule Step_pure/local.tee:
  val (LOCAL.TEE x)  ~>  val val (LOCAL.SET x)


rule Step_read/global.get:
  z; (GLOBAL.GET x)  ~>  $global(z, x).VALUE

rule Step/global.set:
  z; val (GLOBAL.SET x)  ~>  $with_global(z, x, val); epsilon


rule Step_read/table.get-trap:
  z; (CONST I32 i) (TABLE.GET x)  ~>  TRAP
  -- if i >= |$table(z, x).ELEM|

rule Step_read/table.get-val:
  z; (CONST I32 i) (TABLE.GET x)  ~>  $table(z,x).ELEM[i]
  -- if i < |$table(z, x).ELEM|

rule Step/table.set-trap:
  z; (CONST I32 i) ref (TABLE.SET x)  ~>  z; TRAP
  -- if i >= |$table(z, x).ELEM|

rule Step/table.set-val:
  z; (CONST I32 i) ref (TABLE.SET x)  ~>  $with_table(z, x, i, ref); epsilon
  -- if i < |$table(z, x).ELEM|


rule Step_read/table.size:
  z; (TABLE.SIZE x)  ~>  (CONST I32 n)
  -- if |$table(z, x).ELEM| = n  ;; TODO: inline this


rule Step/table.grow-succeed:
  z; ref (CONST I32 n) (TABLE.GROW x)  ~>  $with_tableinst(z, x, ti'); (CONST I32 $(|$table(z, x).ELEM|))
  -- if $table(z, x) = ti
  -- if $grow_table(ti, n, ref) = ti'
  -- Tabletype_ok: |- ti'.TYPE : OK

rule Step/table.grow-fail:
  z; ref (CONST I32 n) (TABLE.GROW x)  ~>  z; (CONST I32 $(-1))


rule Step_read/table.fill-trap:
  z; (CONST I32 i) val (CONST I32 n) (TABLE.FILL x)  ~>  TRAP
  -- if $(i + n) > |$table(z, x).ELEM|

rule Step_read/table.fill-zero:
  z; (CONST I32 i) val (CONST I32 n) (TABLE.FILL x)  ~>  epsilon
  -- otherwise
  -- if n = 0

rule Step_read/table.fill-succ:
  z; (CONST I32 i) val (CONST I32 n) (TABLE.FILL x)  ~>
    (CONST I32 i) val (TABLE.SET x)
    (CONST I32 $(i+1)) val (CONST I32 $(n-1)) (TABLE.FILL x)
  -- otherwise


rule Step_read/table.copy-trap:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>  TRAP
  -- if $(i + n) > |$table(z, y).ELEM| \/ $(j + n) > |$table(z, x).ELEM|

rule Step_read/table.copy-zero:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>  epsilon
  -- otherwise
  -- if n = 0

rule Step_read/table.copy-le:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>
    (CONST I32 j) (CONST I32 i) (TABLE.GET y) (TABLE.SET x)
    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (TABLE.COPY x y)
  -- otherwise
  -- if j <= i

rule Step_read/table.copy-gt:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.COPY x y)  ~>
    (CONST I32 $(j+n-1)) (CONST I32 $(i+n-1)) (TABLE.GET y) (TABLE.SET x)
    (CONST I32 j) (CONST I32 i) (CONST I32 $(n-1)) (TABLE.COPY x y)
  -- otherwise


rule Step_read/table.init-trap:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.INIT x y)  ~>  TRAP
  -- if $(i + n) > |$elem(z, y).ELEM| \/ $(j + n) > |$table(z, x).ELEM|

rule Step_read/table.init-zero:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.INIT x y)  ~>  epsilon
  -- otherwise
  -- if n = 0

rule Step_read/table.init-succ:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (TABLE.INIT x y)  ~>
    (CONST I32 j) $elem(z,y).ELEM[i] (TABLE.SET x)
    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (TABLE.INIT x y)
  -- otherwise


rule Step/elem.drop:
  z; (ELEM.DROP x)  ~>  $with_elem(z, x, epsilon); epsilon


rule Step_read/load-num-trap:
  z; (CONST I32 i) (LOAD nt n_A n_O)  ~>  TRAP
  -- if $(i + n_O + $size(nt)/8 > |$mem(z, 0).DATA|)

rule Step_read/load-num-val:
  z; (CONST I32 i) (LOAD nt n_A n_O)  ~>  (CONST nt c)
  -- if $bytes_($size(nt), c) = $mem(z, 0).DATA[i + n_O : $size(nt)/8]

rule Step_read/load-pack-trap:
  z; (CONST I32 i) (LOAD nt (n _ sx) n_A n_O)  ~>  TRAP
  -- if $(i + n_O + n/8 > |$mem(z, 0).DATA|)

rule Step_read/load-pack-val:
  z; (CONST I32 i) (LOAD nt (n _ sx) n_A n_O)  ~>  (CONST nt $ext(n, $size(nt), sx, c))
  -- if $bytes_(n, c) = $mem(z, 0).DATA[i + n_O : n/8]


rule Step/store-num-trap:
  z; (CONST I32 i) (CONST nt c) (STORE nt n_A n_O)  ~>  z; TRAP
  -- if $(i + n_O + $size(nt)/8) > |$mem(z, 0).DATA|

rule Step/store-num-val:
  z; (CONST I32 i) (CONST nt c) (STORE nt n_A n_O)  ~>  $with_mem(z, 0, $(i + n_O), $($size(nt)/8), b*); epsilon
  -- if b* = $bytes_($size(nt), c)

rule Step/store-pack-trap:
  z; (CONST I32 i) (CONST nt c) (STORE nt n n_A n_O)  ~>  z; TRAP
  -- if $(i + n_O + n/8) > |$mem(z, 0).DATA|

rule Step/store-pack-val:
  z; (CONST I32 i) (CONST nt c) (STORE nt n n_A n_O)  ~>  $with_mem(z, 0, $(i + n_O), $(n/8), b*); epsilon
  -- if b* = $bytes_(n, $wrap_(($size(nt),n), c))


rule Step_read/memory.size:
  z; (MEMORY.SIZE)  ~>  (CONST I32 n)
  -- if $(n * 64 * $Ki) = |$mem(z, 0).DATA|


rule Step/memory.grow-succeed:
  z; (CONST I32 n) (MEMORY.GROW)  ~>  $with_meminst(z, 0, mi'); (CONST I32 $(|$mem(z, 0).DATA| / (64 * $Ki)))
  -- if $mem(z, 0) = mi
  -- if $grow_memory(mi, n) = mi'
  -- Memtype_ok: |- mi'.TYPE : OK

rule Step/memory.grow-fail:
  z; (CONST I32 n) (MEMORY.GROW)  ~>  z; (CONST I32 $(-1))


rule Step_read/memory.fill-trap:
  z; (CONST I32 i) val (CONST I32 n) (MEMORY.FILL)  ~>  TRAP
  -- if $(i + n) > |$mem(z, 0).DATA|

rule Step_read/memory.fill-zero:
  z; (CONST I32 i) val (CONST I32 n) (MEMORY.FILL)  ~>  epsilon
  -- otherwise
  -- if n = 0

rule Step_read/memory.fill-succ:
  z; (CONST I32 i) val (CONST I32 n) (MEMORY.FILL)  ~>
    (CONST I32 i) val (STORE I32 8 0 0)
    (CONST I32 $(i+1)) val (CONST I32 $(n-1)) (MEMORY.FILL)
  -- otherwise


rule Step_read/memory.copy-trap:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>  TRAP
  -- if $(i + n) > |$mem(z, 0).DATA| \/ $(j + n) > |$mem(z, 0).DATA|

rule Step_read/memory.copy-zero:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>  epsilon
  -- otherwise
  -- if n = 0

rule Step_read/memory.copy-le:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>
    (CONST I32 j) (CONST I32 i) (LOAD I32 (8 _ U) 0 0) (STORE I32 8 0 0)
    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (MEMORY.COPY)
  -- otherwise
  -- if j <= i

rule Step_read/memory.copy-gt:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.COPY)  ~>
    (CONST I32 $(j+n-1)) (CONST I32 $(i+n-1)) (LOAD I32 (8 _ U) 0 0) (STORE I32 8 0 0)
    (CONST I32 j) (CONST I32 i) (CONST I32 $(n-1)) (MEMORY.COPY)
  -- otherwise


rule Step_read/memory.init-trap:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.INIT x)  ~>  TRAP
  -- if $(i + n) > |$data(z, x).DATA| \/ $(j + n) > |$mem(z, 0).DATA|

rule Step_read/memory.init-zero:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.INIT x)  ~>  epsilon
  -- otherwise
  -- if n = 0

rule Step_read/memory.init-succ:
  z; (CONST I32 j) (CONST I32 i) (CONST I32 n) (MEMORY.INIT x)  ~>
    (CONST I32 j) (CONST I32 $data(z,x).DATA[i]) (STORE I32 8 0 0)
    (CONST I32 $(j+1)) (CONST I32 $(i+1)) (CONST I32 $(n-1)) (MEMORY.INIT x)
  -- otherwise


rule Step/data.drop:
  z; (DATA.DROP x)  ~>  $with_data(z, x, epsilon); epsilon


;; Module Semantics

def $alloc_func(state, func*) : (store, funcaddr*)

def $alloc_func((s; f), epsilon) = (s, epsilon)

def $alloc_func((s; f), func func'*) = (s_res, fa fa'*)
  -- if fi = { MODULE f.MODULE, CODE func }
  -- if fa = |$funcinst((s; f))|
  -- if s_new = s[.FUNC =.. fi]
  -- if (s_res, fa'*) = $alloc_func((s_new; f), func'*)


def $alloc_global(state, global*) : (store, globaladdr*)

def $alloc_global((s; f), epsilon) = (s, epsilon)

def $alloc_global((s; f), global global'*) = (s_res, ga ga'*)
  -- if global = GLOBAL globaltype instr*
  -- Step_read : s; f; instr* ~> val
  -- if gi = { TYPE globaltype, VALUE val }
  -- if ga = |$globalinst((s; f))|
  -- if s_new = s[.GLOBAL =.. gi]
  -- if (s_res, ga'*) = $alloc_global((s_new; f), global'*)


def $alloc_table(state, table*) : (store, tableaddr*)

def $alloc_table((s; f), epsilon) = (s, epsilon)

def $alloc_table((s; f), table table'*) = (s_res, ta ta'*)
  -- if table = TABLE tabletype
  -- if tabletype = `[i .. j?] reftype
  -- if ti = { TYPE tabletype, ELEM (REF.NULL reftype)^i }
  -- if ta = |$tableinst((s; f))|
  -- if s_new = s[.TABLE =.. ti]
  -- if (s_res, ta'*) = $alloc_table((s_new; f), table'*)


def $alloc_mem(state, mem*) : (store, memaddr*)

def $alloc_mem((s; f), epsilon) = (s, epsilon)

def $alloc_mem((s; f), mem mem'*) = (s_res, ma ma'*)
  -- if mem = MEMORY memtype
  -- if memtype = `[i .. j?] I8
  -- if mi = { TYPE memtype, DATA 0^(i * 64 * $Ki()) }
  -- if ma = |$meminst((s; f))|
  -- if s_new = s[.MEM =.. mi]
  -- if (s_res, ma'*) = $alloc_mem((s_new; f), mem'*)


def $alloc_elem(state, elem*) : (store, elemaddr*)

def $alloc_elem((s; f), epsilon) = (s, epsilon)

def $alloc_elem((s; f), elem elem'*) = (s_res, ea ea'*)
  -- if elem = ELEM reftype (instr*)* elemmode?
  -- (Step_read : s; f; instr* ~> ref)*
  -- if ei = { TYPE reftype, ELEM ref* }
  -- if ea = |$eleminst((s; f))|
  -- if s_new = s[.ELEM =.. ei]
  -- if (s_res, ea'*) = $alloc_elem((s_new; f), elem'*)


def $alloc_data(state, data*) : (store, dataaddr*)

def $alloc_data((s; f), epsilon) = (s, epsilon)

def $alloc_data((s; f), data data'*) = (s_res, da da'*)
  -- if data = DATA byte* datamode?
  -- if di = { DATA byte* }
  -- if da = |$datainst((s; f))|
  -- if s_new = s[.DATA =.. di]
  -- if (s_res, da'*) = $alloc_data((s_new; f), data'*)


def $replace_moduleinst(store, funcaddr*, moduleinst) : store

def $replace_moduleinst(s, epsilon, m) = s

def $replace_moduleinst(s, fa fa'*, m) = s_res
  -- if s_new = s[.FUNC[fa].MODULE = m]
  -- if s_res = $replace_moduleinst(s_new, fa'*, m)


def $alloc_module(store, module) : (store, moduleinst)

def $alloc_module(s, module) = (s_res, m)
  -- if module = MODULE import* func* global* table* mem* elem* data* start? export*
  -- if m' = { FUNC epsilon, GLOBAL epsilon, TABLE epsilon, MEM epsilon, ELEM epsilon, DATA epsilon, EXPORT epsilon }
  -- if f = { LOCAL epsilon, MODULE m' }
  -- if (s_func, fa*) = $alloc_func((s; f), func*)
  -- if (s_global, ga*) = $alloc_global((s_func; f), global*)
  -- if (s_table, ta*) = $alloc_table((s_global; f), table*)
  -- if (s_mem, ma*) = $alloc_mem((s_table; f), mem*)
  -- if (s_elem, ea*) = $alloc_elem((s_mem; f), elem*)
  -- if (s_data, da*) = $alloc_data((s_elem; f), data*)
  -- if m = { FUNC fa*, GLOBAL ga*, TABLE ta*, MEM ma*, ELEM ea*, DATA da*, EXPORT epsilon }
  -- if s_res = $replace_moduleinst(s_elem, fa*, m)


def $run_elem(state, elem*, idx) : state

def $run_elem((s; f), epsilon, i) = s; f

def $run_elem((s; f), elem elem'*, i) = s_res; f_res
  -- if elem = ELEM reftype expr*
  -- if $run_elem((s; f), elem'*, $(i + 1)) = s_res; f_res

def $run_elem((s; f), elem elem'*, i) = s_res; f_res
  -- if elem = ELEM reftype expr* elemmode
  -- if n = |expr*|
  -- if elemmode = TABLE x instr*
  -- Step : s; f; instr* (CONST I32 0) (CONST I32 n) (TABLE.INIT x i) (ELEM.DROP i) ~> s_new; f_new; epsilon
  -- if $run_elem((s_new; f_new), elem'*, $(i + 1)) = s_res; f_res

def $run_elem((s; f), elem elem'*, i) = s_res; f_res
  -- if elem = ELEM reftype expr* elemmode
  -- if elemmode = DECLARE
  -- Step : s; f; (ELEM.DROP i) ~> s_new; f_new; epsilon
  -- if $run_elem((s_new; f_new), elem'*, $(i + 1)) = s_res; f_res


def $run_data(state, data*, idx) : state

def $run_data((s; f), epsilon, i) = s; f

def $run_data((s; f), data data'*, i) = s_res; f_res
  -- if data = DATA byte*
  -- if $run_data((s; f), data'*, $(i + 1)) = s_res; f_res

def $run_data((s; f), data data'*, i) = s_res; f_res
  -- if data = DATA byte* datamode
  -- if n = |byte*|
  -- if datamode = MEMORY 0 instr*
  -- Step : s; f; instr* (CONST I32 0) (CONST I32 n) (MEMORY.INIT i) (DATA.DROP i) ~> s_new; f_new; epsilon
  -- if $run_data((s_new; f_new), data'*, $(i + 1)) = s_res; f_res


def $instantiation(store, module) : (store, moduleinst)

def $instantiation(s, module) = (s_res, m)
  -- if module = MODULE import* func* global* table* mem* elem* data* export*
  -- if (s_alloc, m) = $alloc_module(s, module)
  -- if f = { LOCAL epsilon, MODULE m }
  -- if $run_elem((s_alloc; f_alloc), elem*, 0) = s_elem; f_elem
  -- if $run_data((s_elem; f_elem), data*, 0) = s_res; f_res

def $instantiation(s, module) = (s_res, m)
  -- if module = MODULE import* func* global* table* mem* elem* data* start export*
  -- if (s_alloc, m) = $alloc_module(s, module)
  -- if f = { LOCAL epsilon, MODULE m }
  -- if $run_elem((s_alloc; f_alloc), elem*, 0) = s_elem; f_elem
  -- if $run_data((s_elem; f_elem), data*, 0) = s_data; f_data
  -- if start = START x
  -- Step : s_data; f_data; (CALL x) ~> s_res; f_res; epsilon


def $invocation(store, funcaddr, val*) : (store, val*)

def $invocation(s, fa, val*) = (s', val'*)
  -- if m = { FUNC epsilon, GLOBAL epsilon, TABLE epsilon, MEM epsilon, ELEM epsilon, DATA epsilon, EXPORT epsilon }
  -- if f = { LOCAL epsilon, MODULE m }
  -- if $funcinst((s; f))[fa].CODE = FUNC functype valtype* expr
  -- if functype = valtype* -> valtype'*
  -- if |val*| = |valtype*|
  -- if |val'*| = |valtype'*|
  -- Step : s; f; val* (CALL_ADDR fa) ~> s'; f'; val'*
