;; Allocation


def $funcs(externval*) : funcaddr*
def $globals(externval*) : globaladdr*
def $tables(externval*) : tableaddr*
def $mems(externval*) : memaddr*

def $funcs(externval*) = [fa|FUNC fa ∈ externval]
def $globals(externval*) = [ga|GLOBAL ga ∈ externval]
def $tables(externval*) = [ta|TABLE ta ∈ externval]
def $mems(externval*) = [ma|MEM ma ∈ externval]


def $instexport(funcaddr*, globaladdr*, tableaddr*, memaddr*, name, externuse) : exportinst
def $instexport(fa*, ga*, ta*, ma*, EXPORT name (FUNC x)) = { NAME name, VALUE (FUNC fa*[x]) }
def $instexport(fa*, ga*, ta*, ma*, EXPORT name (GLOBAL x)) = { NAME name, VALUE (GLOBAL ga*[x]) }
def $instexport(fa*, ga*, ta*, ma*, EXPORT name (TABLE x)) = { NAME name, VALUE (TABLE ta*[x]) }
def $instexport(fa*, ga*, ta*, ma*, EXPORT name (MEM x)) = { NAME name, VALUE (MEM ma*[x]) }


def $allocfunc(store, moduleinst func) : store
def $allocfunc(s, m, func) = s.[.FUNC =.. fi]
  -- if fi = { MODULE m, CODE func }

def $allocglobal(store, global, val) : store
def $allocglobal(s, GLOBAL globaltype instr*, val) = s[.GLOBAL =.. gi]
  -- if gi = { TYPE globaltype, VALUE val }

def $alloctable(store, table) : store
def $alloctable(s, TABLE tabletype) = s[.TABLE =.. ti]
  -- if tabletype = `[i .. j] rt
  -- if ti = { TYPE tabletype, ELEM (REF.NULL rt)^i }

def $allocmem(store, mem) : store
def $allocmem(s, MEMORY memtype) = s[.MEM =.. mi]
  -- if memtype = `[i .. j] I8
  -- if mi = { TYPE memtype, DATA 0^(i * 64 * $Ki()) }

def $allocelem(store, elem, ref*) : store
def $allocelem(s, ELEM rt (instr*)* elemode?, ref*) = s[.ELEM =.. ei]
  -- if ei = { TYPE rt, ELEM ref* }

def $allocdata(store, data) : store
def $allocdata(s, DATA byte* datamode?) = s[.DATA =.. di]
  -- if di = { DATA byte* }


def $allocmodule(store, module, externval*, val*, (ref*)*) : (store, moduleinst)
def $allocmodule(s, module, externval*, val*, (ref*)*) = (s_6, m)
  -- if module = MODULE import* func* global* table* mem* elem* data* start? export*
  -- if fa_ex* = $funcs(externval*)
  -- if fa* = |s.FUNC| ... $(|s.FUNC| + |func*| - 1)
  -- if ga_ex* = $globals(externval*)
  -- if ga* = |s.GLOBAL| ... $(|s.GLOBAL| + |global*| - 1)
  -- if ta_ex* = $tables(externval*)
  -- if ta* = |s.TABLE| ... $(|s.TABLE| + |table*| - 1)
  -- if ma_ex = $mems(externval*)
  -- if ma* = |s.MEM| ... $(|s.MEM| + |mem*| - 1)
  -- if ea* = |s.ELEM| ... $(|s.ELEM| + |elem*| - 1)
  -- if da* = |s.DATA| ... $(|s.DATA| + |data*| - 1)
  -- if xi* = $instantiate_export(fa_ex* fa*, ga_ex* ga*, ta_ex* ta*, ma_ex* ma*, export)*
  -- if m = {
      FUNC fa_ex* fa*,
      GLOBAL ga_ex* ga*,
      TABLE ta_ex* ta*,
      MEM ma_ex* ma*,
      ELEM ea*,
      DATA da*,
      EXPORT xi*
    }
  -- if s_1 = $allocfunc*(s, m, func*)
  -- if s_2 = $allocglobal*(s_1, global*, val*)
  -- if s_3 = $alloctable*(s_2, table*)
  -- if s_4 = $allocmem*(s_3, mem*)
  -- if s_5 = $allocelem*(s_4, (ref*)*)
  -- if s_6 = $allocdata*(s_5, data*)


def $runelem(state, elem, idx) : instr*
def $runelem((s; f), ELEM reftype expr*, i) = epsilon
def $runelem((s; f), ELEM reftype expr* (DECLARE), i) = (ELEM.DROP i)
def $runelem((s; f), ELEM reftype expr* (TABLE x instr*), i) =
  instr* (CONST I32 0) (CONST I32 |expr*|) (TABLE.INIT x i) (ELEM.DROP i)

def $rundata(state, data, idx) : instr*
def $rundata((s; f), DATA byte*, i) = epsilon
def $rundata((s; f), DATA byte* (MEMORY 0 instr*), i) =
  instr* (CONST I32 0) (CONST I32 |byte*|) (MEMORY.INIT i) (DATA.DROP i)


def $instantiation(store, module, externval*) : config
def $instantiation(s, module, externval*) = s'; f; $runelem(elem, i)* $rundata(data, j)* (CALL x)?
  -- if module = MODULE import* func* global* table* mem* elem* data* start? export*
  -- if m_init = {
      FUNC $funcs(externval*),
      GLOBAL $globals(externval*),
      TABEL epsilon,
      MEM epsilon,
      ELEM epsilon,
      DATA epsilon,
      EXPORT epsilon
    }
  -- if f_init = { LOCAL epsilon, MODULE m_init }
  -- (if global = GLOBAL globaltype instr*)*
  -- (Step_read : s; f_init; instr* ~> val)*
  -- (if elem = ELEM reftype (instr'*)* elemmode?)*
  -- ((Step_read : s; f_init; instr'* ~> ref)*)*
  -- if (s', m) = $alloc_module(s, module, externval*, val*, (ref*)*)
  -- if f = { LOCAL epsilon, MODULE m }
  -- if i* = 0 ... $(|elem*| - 1)
  -- if j* = 0 ... $(|data*| - 1)
  -- start? = (START x)?


def $invocation(store, funcaddr, val*) : config
def $invocation(s, fa, val^n) = s; f; val^n (CALL_ADDR fa)
  -- if m = {
      FUNC epsilon,
      GLOBAL epsilon,
      TABLE epsilon,
      MEM epsilon,
      ELEM epsilon,
      DATA epsilon,
      EXPORT epsilon
    }
  -- if f = { LOCAL epsilon, MODULE m }
  -- if $funcinst((s; f))[fa].CODE = FUNC functype valtype* expr
  -- if functype = valtype^n -> valtype'^k
