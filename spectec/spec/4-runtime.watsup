;; Addresses

syntax addr hint(desc "address") = nat
syntax funcaddr hint(desc "function address") = addr
syntax globaladdr hint(desc "global address") = addr
syntax tableaddr hint(desc "table address") = addr
syntax memaddr hint(desc "memory address") = addr
syntax elemaddr hint(desc "elem address") = addr
syntax dataaddr hint(desc "data address") = addr
syntax labeladdr hint(desc "label address") = addr
syntax hostaddr hint(desc "host address") = addr

var a : addr
var fa : funcaddr
var ga : globaladdr
var ta : tableaddr
var ma : memaddr
var ea : elemaddr
var da : dataaddr


;; Values

syntax num hint(desc "number") =
  | CONST numtype c_numtype
syntax ref hint(desc "reference") =
  | REF.NULL reftype | REF.FUNC_ADDR funcaddr | REF.HOST_ADDR hostaddr
syntax val hint(desc "value") =
  | num | ref

syntax result hint(desc "result") =
  | _VALS val* | TRAP

var r : ref
var v : val
var res : result

syntax externval hint(desc "external value") =
  | FUNC funcaddr | GLOBAL globaladdr | TABLE tableaddr | MEM memaddr

var xv : externval


def $default(valtype) : val
def $default(I32) = (CONST I32 0)
def $default(I64) = (CONST I64 0)
def $default(F32) = (CONST F32 0)
def $default(F64) = (CONST F64 0)
def $default(reftype) = (REF.NULL reftype)


;; Configurations

syntax funcinst hint(desc "function instance") = moduleinst; func
syntax globalinst hint(desc "global instance") = val
syntax tableinst hint(desc "table instance") = ref*
syntax meminst hint(desc "memory instance") = byte*
syntax eleminst hint(desc "element instance") = ref*
syntax datainst hint(desc "data instance") = byte*
syntax exportinst hint(desc "export instance") = EXPORT name externval

syntax store hint(desc "store") =
  { FUNC funcinst*,
    GLOBAL globalinst*,
    TABLE tableinst*,
    MEM meminst*,
    ELEM eleminst*,
    DATA datainst* }

syntax moduleinst hint(desc "module instance") =
  { FUNC funcaddr*,
    GLOBAL globaladdr*,
    TABLE tableaddr*,
    MEM memaddr*,
    ELEM elemaddr*,
    DATA dataaddr*,
    EXPORT exportinst* }

syntax frame hint(desc "frame") = moduleinst; val*
syntax state hint(desc "state") = store; frame
syntax config hint(desc "configuration") = state; admininstr*

var s : store
var f : frame
var z : state

var m : moduleinst
var fi : funcinst
var gi : globalinst
var ti : tableinst
var mi : meminst
var ei : eleminst
var di : datainst
var xi : exportinst

def $funcaddr(state) : funcaddr*  hint(show %.FUNC)
def $funcaddr(s; (m; val*)) = m.FUNC

def $funcinst(state) : funcinst*  hint(show %.FUNC)
def $funcinst(s; f) = s.FUNC

def $func(state, funcidx) : funcinst  hint(show %.FUNC)
def $func((s; (m; val*)), x) = s.FUNC[m.FUNC[x]]

def $table(state, tableidx) : tableinst  hint(show %.TABLE)
def $table((s; (m; val*)), x) = s.TABLE[m.TABLE[x]]


;; Administrative Instructions

syntax admininstr hint(show instr) hint(desc "administrative instruction") =
  | instr
  | REF.FUNC_ADDR funcaddr        hint(show REF.FUNC %)
  | REF.HOST_ADDR hostaddr        hint(show REF.EXTERN %)
  | CALL_ADDR funcaddr            hint(show CALL %)
  | LABEL nat instr* admininstr*  hint(show LABEL_#%#`{%} %%)
  | FRAME nat frame admininstr*   hint(show FRAME_#%#`{%} %%)
  | TRAP

syntax E hint(desc "evaluation context") =
  | _HOLE `[ _ ]
  | _SEQ val* E instr*
  | LABEL nat instr* E
