;; General variables

var i : nat  ;; hack
syntax N hint(macro) = nat  ;; hack
syntax n hint(macro) = nat  ;; hack

;;
;; Values
;;

;; Integers

syntax iN(N) hint(desc "integer") hint(show i#%) =
  0 | ... | 2^N-1


;;
;; Names
;;

syntax char hint(desc "character") = U+0000 | ... | U+D7FF | U+E000 | ... | U+10FFFF

syntax name hint(desc "name") = char*


;;
;; Indices
;;

syntax idx hint(desc "index") = iN(32)

syntax typeidx hint(desc "type index") = idx
syntax funcidx hint(desc "function index") = idx
syntax labelidx hint(desc "label index") = idx
syntax localidx hint(desc "local index") = idx

var x : idx
var l : labelidx


;; Types

syntax valtype hint(desc "number type") =
  | I32 | I64 |

syntax Inn hint(show I#n) = I32 | I64

var t : valtype

syntax resulttype hint(desc "result type") =
  valtype?

syntax functype hint(desc "function type") =
  valtype* -> valtype*
syntax externtype hint(desc "external type") =
  | FUNC functype

var ft : functype
var xt : externtype


;; Constants

def $size(valtype) : nat  hint(partial) hint(show |%|)

syntax val_(valtype)
syntax val_(Inn) = iN($size(Inn))

;; Operators


syntax binop_(valtype)
syntax binop_(Inn) =
  | ADD | SUB | MUL

;; Instructions

syntax blocktype hint(desc "block type") = valtype?

var bt : blocktype

syntax instr/parametric hint(desc "parametric instruction") =
  | NOP
  | DROP
  | SELECT
  | ...

syntax instr/block hint(desc "block instruction") = ...
  | BLOCK blocktype instr*
  | LOOP blocktype instr*
  | IF blocktype instr* ELSE instr*
  | ...

syntax instr/br hint(desc "branch instruction") = ...
  | BR labelidx
  | BR_IF labelidx
  | ...

syntax instr/call hint(desc "call instruction") = ...
  | CALL funcidx
  | RETURN
  | ...

syntax instr/num hint(desc "numeric instruction") = ...
  | CONST valtype val_(valtype)      hint(show %.CONST %)
  | BINOP valtype binop_(valtype)    hint(show %.%)
  | ...

syntax instr/local hint(desc "local instruction") = ...
  | LOCAL.GET localidx
  | LOCAL.SET localidx
  | LOCAL.TEE localidx


syntax expr hint(desc "expression") =
  instr*

syntax instr hint(desc "instruction")

var in : instr
var e : expr


;; Modules

syntax type hint(desc "type") =
  TYPE functype
syntax local hint(desc "local") =
  LOCAL valtype
syntax func hint(desc "function") =
  FUNC typeidx local* expr
syntax start hint(desc "start function") =
  START funcidx

syntax externidx hint(desc "external index") =
  | FUNC funcidx
syntax export hint(desc "export") =
  EXPORT name externidx

syntax module hint(desc "module") =
  MODULE type* func* start* export*


var ty : type
var loc : local
var ex : export
var st : start
var xx : externidx
