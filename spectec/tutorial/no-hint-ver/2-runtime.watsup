;;
;; Addresses
;;

syntax addr hint(desc "address") = nat
syntax funcaddr hint(desc "function address") = addr


;;
;; Values
;;

;; Basic values

syntax val hint(desc "value") =
  | CONST valtype num_(valtype)


;; External values

syntax externval hint(desc "external value") =
  | FUNC funcaddr


;;
;; Configurations
;;

;; Instances

syntax funcinst hint(desc "function instance") =
  { TYPE functype,
    MODULE moduleinst,
    CODE func }
syntax exportinst hint(desc "export instance") =
  { NAME name,
    VALUE externval }

syntax moduleinst hint(desc "module instance") =
  { TYPES functype*,
    FUNCS funcaddr*,
    EXPORTS exportinst* }


;; Configurations proper

syntax store hint(desc "store") =
  { FUNCS funcinst* }

syntax frame hint(desc "frame") =
  { LOCALS val*,
    MODULE moduleinst }

syntax state hint(desc "state") = store; frame
syntax config hint(desc "configuration") = state; admininstr*


;;
;; Administrative Instructions
;;

syntax admininstr hint(desc "administrative instruction") =
  | instr
  | CALL_ADDR funcaddr
  | LABEL_ n `{instr*} admininstr*
  | FRAME_ n `{frame} admininstr*
  | TRAP

def $funcaddr(state) : funcaddr*
def $funcaddr((s; f)) = f.MODULE.FUNCS


def $local(state, localidx) : val
def $local((s; f), x) = f.LOCALS[x]

def $with_local(state, localidx, val) : state
def $with_local((s; f), x, v) = s; f[.LOCALS[x] = v]

def $funcinst(state) : funcinst*
def $funcinst((s; f)) = s.FUNCS

def $default_(valtype) : val

def $default_(I32) = (CONST I32 0)
def $default_(I64) = (CONST I64 0)