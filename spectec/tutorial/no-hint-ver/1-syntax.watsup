;; General variables

syntax N hint(macro) = nat  ;; hack
syntax n hint(macro) = nat  ;; hack

;;
;; Values
;;

;; Integers

syntax iN(N) hint(desc "integer") =
  0 | ... | 2^N-1


;;
;; Names
;;

syntax char hint(desc "character") = U+0000 | ... | U+D7FF | U+E000 | ... | U+10FFFF

syntax name hint(desc "name") = char*


;;
;; Indices
;;

syntax idx hint(desc "index") = iN(32)

syntax typeidx hint(desc "type index") = idx
syntax funcidx hint(desc "function index") = idx
syntax labelidx hint(desc "label index") = idx
syntax localidx hint(desc "local index") = idx


;; Types

syntax valtype hint(desc "number type") = I32 | I64

syntax resulttype hint(desc "result type") =
  valtype?

syntax functype hint(desc "function type") =
  valtype* -> valtype*

syntax externtype hint(desc "external type") =
  | FUNC functype


;; Constants

def $size(valtype) : nat  hint(partial)
def $size(I32) = 32
def $size(I64) = 64

syntax num_(valtype) = iN($size(valtype))

;; Operators



syntax binop = ADD | SUB | MUL | DIV

;; Instructions

syntax instr/parametric hint(desc "parametric instruction") =
  | NOP
  | DROP
  | SELECT
  | ...

syntax instr/block hint(desc "block instruction") = ...
  | BLOCK functype instr*
  | LOOP functype instr*
  | IF functype instr* ELSE instr*
  | ...

syntax instr/br hint(desc "branch instruction") = ...
  | BR labelidx
  | BR_IF labelidx
  | ...

syntax instr/call hint(desc "call instruction") = ...
  | CALL funcidx
  | RETURN
  | ...

syntax instr/num hint(desc "numeric instruction") = ...
  | CONST valtype num_(valtype)
  | BINOP valtype binop
  | ...

syntax instr/local hint(desc "local instruction") = ...
  | LOCAL.GET localidx
  | LOCAL.SET localidx


syntax expr hint(desc "expression") =
  instr*

syntax instr hint(desc "instruction")


;; Modules

syntax type hint(desc "type") =
  TYPE functype
syntax local hint(desc "local") =
  LOCAL valtype
syntax func hint(desc "function") =
  FUNC typeidx local* expr

syntax externidx hint(desc "external index") =
  | FUNC funcidx
syntax export hint(desc "export") =
  EXPORT name externidx

syntax module hint(desc "module") =
  MODULE type* func* export*

var i : nat  ;; hack
var x : idx
var l : labelidx
var t : valtype
var ft : functype
var in : instr
var e : expr