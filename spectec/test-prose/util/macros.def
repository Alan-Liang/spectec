
.. MATH MACROS


.. Generic Stuff
.. -------------

.. Type-setting of names
.. X - (multi-letter) variables / non-terminals
.. F - functions
.. K - keywords / terminals
.. B - binary grammar non-terminals
.. T - textual grammar non-terminals

.. |X| mathdef:: \mathit
.. |F| mathdef:: \mathrm
.. |K| mathdef:: \mathsf
.. |B| mathdef:: \mathtt
.. |T| mathdef:: \mathtt

.. syntax
.. ------

.. E
.. -
.. |LABEL-E| mathdef:: \xref{exec/runtime}{syntax-E}{\K{label\_}}
.. |HOLE-E| mathdef:: \xref{exec/runtime}{syntax-E}{\K{\_hole}}
.. |SEQ-E| mathdef:: \xref{exec/runtime}{syntax-E}{\K{\_seq}}

.. ADDR
.. ----

.. ADMININSTR
.. ----------
.. |CALLADDR-admininstr| mathdef:: \xref{exec/runtime}{syntax-admininstr}{\K{call\_addr}}
.. |FRAME-admininstr| mathdef:: \xref{exec/runtime}{syntax-admininstr}{\K{frame\_}}
.. |LABEL-admininstr| mathdef:: \xref{exec/runtime}{syntax-admininstr}{\K{label\_}}
.. |REFFUNCADDR-admininstr| mathdef:: \xref{exec/runtime}{syntax-admininstr}{\K{ref{.}func\_addr}}
.. |REFHOSTADDR-admininstr| mathdef:: \xref{exec/runtime}{syntax-admininstr}{\K{ref{.}host\_addr}}
.. |TRAP-admininstr| mathdef:: \xref{exec/runtime}{syntax-admininstr}{\K{trap}}

.. BINOP_FXX
.. ---------
.. |ADD-binopFXX| mathdef:: \xref{syntax/instructions}{syntax-binop_FXX}{\K{add}}
.. |COPYSIGN-binopFXX| mathdef:: \xref{syntax/instructions}{syntax-binop_FXX}{\K{copysign}}
.. |DIV-binopFXX| mathdef:: \xref{syntax/instructions}{syntax-binop_FXX}{\K{div}}
.. |MAX-binopFXX| mathdef:: \xref{syntax/instructions}{syntax-binop_FXX}{\K{max}}
.. |MIN-binopFXX| mathdef:: \xref{syntax/instructions}{syntax-binop_FXX}{\K{min}}
.. |MUL-binopFXX| mathdef:: \xref{syntax/instructions}{syntax-binop_FXX}{\K{mul}}
.. |SUB-binopFXX| mathdef:: \xref{syntax/instructions}{syntax-binop_FXX}{\K{sub}}

.. BINOP_IXX
.. ---------
.. |ADD-binopIXX| mathdef:: \xref{syntax/instructions}{syntax-binop_IXX}{\K{add}}
.. |AND-binopIXX| mathdef:: \xref{syntax/instructions}{syntax-binop_IXX}{\K{and}}
.. |DIV-binopIXX| mathdef:: \xref{syntax/instructions}{syntax-binop_IXX}{\K{div}}
.. |MUL-binopIXX| mathdef:: \xref{syntax/instructions}{syntax-binop_IXX}{\K{mul}}
.. |OR-binopIXX| mathdef:: \xref{syntax/instructions}{syntax-binop_IXX}{\K{or}}
.. |REM-binopIXX| mathdef:: \xref{syntax/instructions}{syntax-binop_IXX}{\K{rem}}
.. |ROTL-binopIXX| mathdef:: \xref{syntax/instructions}{syntax-binop_IXX}{\K{rotl}}
.. |ROTR-binopIXX| mathdef:: \xref{syntax/instructions}{syntax-binop_IXX}{\K{rotr}}
.. |SHL-binopIXX| mathdef:: \xref{syntax/instructions}{syntax-binop_IXX}{\K{shl}}
.. |SHR-binopIXX| mathdef:: \xref{syntax/instructions}{syntax-binop_IXX}{\K{shr}}
.. |SUB-binopIXX| mathdef:: \xref{syntax/instructions}{syntax-binop_IXX}{\K{sub}}
.. |XOR-binopIXX| mathdef:: \xref{syntax/instructions}{syntax-binop_IXX}{\K{xor}}

.. BINOP_NUMTYPE
.. -------------
.. |F-binopnumtype| mathdef:: \xref{syntax/instructions}{syntax-binop_numtype}{\K{\_f}}
.. |I-binopnumtype| mathdef:: \xref{syntax/instructions}{syntax-binop_numtype}{\K{\_i}}

.. BLOCKTYPE
.. ---------

.. BYTE
.. ----

.. C_NUMTYPE
.. ---------

.. C_VECTYPE
.. ---------

.. CONFIG
.. ------

.. CONTEXT
.. -------
.. |DATA-context| mathdef:: \xref{valid/conventions}{syntax-context}{\K{data}}
.. |ELEM-context| mathdef:: \xref{valid/conventions}{syntax-context}{\K{elem}}
.. |FUNC-context| mathdef:: \xref{valid/conventions}{syntax-context}{\K{func}}
.. |GLOBAL-context| mathdef:: \xref{valid/conventions}{syntax-context}{\K{global}}
.. |LABEL-context| mathdef:: \xref{valid/conventions}{syntax-context}{\K{label}}
.. |LOCAL-context| mathdef:: \xref{valid/conventions}{syntax-context}{\K{local}}
.. |MEM-context| mathdef:: \xref{valid/conventions}{syntax-context}{\K{mem}}
.. |RETURN-context| mathdef:: \xref{valid/conventions}{syntax-context}{\K{return}}
.. |TABLE-context| mathdef:: \xref{valid/conventions}{syntax-context}{\K{table}}

.. CVTOP
.. -----
.. |CONVERT-cvtop| mathdef:: \xref{syntax/instructions}{syntax-cvtop}{\K{convert}}
.. |REINTERPRET-cvtop| mathdef:: \xref{syntax/instructions}{syntax-cvtop}{\K{reinterpret}}

.. DATA
.. ----
.. |DATA-data| mathdef:: \xref{syntax/modules}{syntax-data}{\K{data}}

.. DATAADDR
.. --------

.. DATAIDX
.. -------

.. DATAINST
.. --------
.. |DATA-datainst| mathdef:: \xref{exec/runtime}{syntax-datainst}{\K{data}}

.. DATAMODE
.. --------
.. |MEMORY-datamode| mathdef:: {\K{memory}}

.. DATATYPE
.. --------
.. |OK-datatype| mathdef:: \xref{syntax/types}{syntax-datatype}{\K{ok}}

.. ELEM
.. ----
.. |ELEM-elem| mathdef:: \xref{syntax/modules}{syntax-elem}{\K{elem}}

.. ELEMADDR
.. --------

.. ELEMIDX
.. -------

.. ELEMINST
.. --------
.. |ELEM-eleminst| mathdef:: \xref{exec/runtime}{syntax-eleminst}{\K{elem}}
.. |TYPE-eleminst| mathdef:: \xref{exec/runtime}{syntax-eleminst}{\K{type}}

.. ELEMMODE
.. --------
.. |DECLARE-elemmode| mathdef:: {\K{declare}}
.. |TABLE-elemmode| mathdef:: {\K{table}}

.. ELEMTYPE
.. --------

.. EXPORT
.. ------
.. |EXPORT-export| mathdef:: \xref{syntax/modules}{syntax-export}{\K{export}}

.. EXPORTINST
.. ----------
.. |NAME-exportinst| mathdef:: \xref{exec/runtime}{syntax-exportinst}{\K{name}}
.. |VALUE-exportinst| mathdef:: \xref{exec/runtime}{syntax-exportinst}{\K{value}}

.. EXPR
.. ----

.. EXTERNTYPE
.. ----------
.. |FUNC-externtype| mathdef:: {\K{func}}
.. |GLOBAL-externtype| mathdef:: {\K{global}}
.. |MEM-externtype| mathdef:: {\K{mem}}
.. |TABLE-externtype| mathdef:: {\K{table}}

.. EXTERNUSE
.. ---------
.. |FUNC-externuse| mathdef:: \xref{syntax/modules}{syntax-externuse}{\K{func}}
.. |GLOBAL-externuse| mathdef:: \xref{syntax/modules}{syntax-externuse}{\K{global}}
.. |MEM-externuse| mathdef:: \xref{syntax/modules}{syntax-externuse}{\K{mem}}
.. |TABLE-externuse| mathdef:: \xref{syntax/modules}{syntax-externuse}{\K{table}}

.. EXTERNVAL
.. ---------
.. |FUNC-externval| mathdef:: \xref{exec/runtime}{syntax-externval}{\K{func}}
.. |GLOBAL-externval| mathdef:: \xref{exec/runtime}{syntax-externval}{\K{global}}
.. |MEM-externval| mathdef:: \xref{exec/runtime}{syntax-externval}{\K{mem}}
.. |TABLE-externval| mathdef:: \xref{exec/runtime}{syntax-externval}{\K{table}}

.. FN
.. --
.. |F32-fn| mathdef:: \xref{syntax/types}{syntax-fn}{\K{f32}}
.. |F64-fn| mathdef:: \xref{syntax/types}{syntax-fn}{\K{f64}}

.. FRAME
.. -----
.. |LOCAL-frame| mathdef:: \xref{exec/runtime}{syntax-frame}{\K{local}}
.. |MODULE-frame| mathdef:: \xref{exec/runtime}{syntax-frame}{\K{module}}

.. FUNC
.. ----
.. |FUNC-func| mathdef:: \xref{syntax/modules}{syntax-func}{\K{func}}

.. FUNCADDR
.. --------

.. FUNCIDX
.. -------

.. FUNCINST
.. --------
.. |CODE-funcinst| mathdef:: \xref{exec/runtime}{syntax-funcinst}{\K{code}}
.. |MODULE-funcinst| mathdef:: \xref{exec/runtime}{syntax-funcinst}{\K{module}}

.. FUNCTYPE
.. --------

.. GLOBAL
.. ------
.. |GLOBAL-global| mathdef:: \xref{syntax/modules}{syntax-global}{\K{global}}

.. GLOBALADDR
.. ----------

.. GLOBALIDX
.. ---------

.. GLOBALINST
.. ----------
.. |TYPE-globalinst| mathdef:: \xref{exec/runtime}{syntax-globalinst}{\K{type}}
.. |VALUE-globalinst| mathdef:: \xref{exec/runtime}{syntax-globalinst}{\K{value}}

.. GLOBALTYPE
.. ----------
.. |MUT-globaltype| mathdef:: \xref{syntax/types}{syntax-globaltype}{\K{mut}}

.. HOSTADDR
.. --------

.. IDX
.. ---

.. IMPORT
.. ------
.. |IMPORT-import| mathdef:: \xref{syntax/modules}{syntax-import}{\K{import}}

.. IN
.. --
.. |I32-in| mathdef:: \xref{syntax/types}{syntax-in}{\K{i32}}
.. |I64-in| mathdef:: \xref{syntax/types}{syntax-in}{\K{i64}}

.. INSTR
.. -----

.. INSTR-CONTROL
.. -------------
.. |BLOCK-instr-control| mathdef:: \xref{syntax/instructions}{syntax-instr-control}{\K{block}}
.. |BR-instr-control| mathdef:: \xref{syntax/instructions}{syntax-instr-control}{\K{br}}
.. |BRIF-instr-control| mathdef:: \xref{syntax/instructions}{syntax-instr-control}{\K{br\_if}}
.. |BRTABLE-instr-control| mathdef:: \xref{syntax/instructions}{syntax-instr-control}{\K{br\_table}}
.. |CALL-instr-control| mathdef:: \xref{syntax/instructions}{syntax-instr-control}{\K{call}}
.. |CALLINDIRECT-instr-control| mathdef:: \xref{syntax/instructions}{syntax-instr-control}{\K{call\_indirect}}
.. |DROP-instr-control| mathdef:: \xref{syntax/instructions}{syntax-instr-control}{\K{drop}}
.. |IF-instr-control| mathdef:: \xref{syntax/instructions}{syntax-instr-control}{\K{if}}
.. |LOOP-instr-control| mathdef:: \xref{syntax/instructions}{syntax-instr-control}{\K{loop}}
.. |NOP-instr-control| mathdef:: \xref{syntax/instructions}{syntax-instr-control}{\K{nop}}
.. |RETURN-instr-control| mathdef:: \xref{syntax/instructions}{syntax-instr-control}{\K{return}}
.. |SELECT-instr-control| mathdef:: \xref{syntax/instructions}{syntax-instr-control}{\K{select}}
.. |UNREACHABLE-instr-control| mathdef:: \xref{syntax/instructions}{syntax-instr-control}{\K{unreachable}}

.. INSTR-NUMERIC
.. -------------
.. |BINOP-instr-numeric| mathdef:: \xref{syntax/instructions}{syntax-instr-numeric}{\K{binop}}
.. |CONST-instr-numeric| mathdef:: \xref{syntax/instructions}{syntax-instr-numeric}{\K{const}}
.. |CVTOP-instr-numeric| mathdef:: \xref{syntax/instructions}{syntax-instr-numeric}{\K{cvtop}}
.. |EXTEND-instr-numeric| mathdef:: \xref{syntax/instructions}{syntax-instr-numeric}{\K{extend}}
.. |RELOP-instr-numeric| mathdef:: \xref{syntax/instructions}{syntax-instr-numeric}{\K{relop}}
.. |TESTOP-instr-numeric| mathdef:: \xref{syntax/instructions}{syntax-instr-numeric}{\K{testop}}
.. |UNOP-instr-numeric| mathdef:: \xref{syntax/instructions}{syntax-instr-numeric}{\K{unop}}

.. INSTR-REFERENCE
.. ---------------
.. |REFFUNC-instr-reference| mathdef:: \xref{syntax/instructions}{syntax-instr-reference}{\K{ref{.}func}}
.. |REFISNULL-instr-reference| mathdef:: \xref{syntax/instructions}{syntax-instr-reference}{\K{ref{.}is\_null}}
.. |REFNULL-instr-reference| mathdef:: \xref{syntax/instructions}{syntax-instr-reference}{\K{ref{.}null}}

.. INSTR-STATE
.. -----------
.. |DATADROP-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{data{.}drop}}
.. |ELEMDROP-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{elem{.}drop}}
.. |GLOBALGET-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{global{.}get}}
.. |GLOBALSET-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{global{.}set}}
.. |LOAD-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{load}}
.. |LOCALGET-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{local{.}get}}
.. |LOCALSET-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{local{.}set}}
.. |LOCALTEE-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{local{.}tee}}
.. |MEMORYCOPY-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{memory{.}copy}}
.. |MEMORYFILL-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{memory{.}fill}}
.. |MEMORYGROW-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{memory{.}grow}}
.. |MEMORYINIT-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{memory{.}init}}
.. |MEMORYSIZE-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{memory{.}size}}
.. |STORE-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{store}}
.. |TABLECOPY-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{table{.}copy}}
.. |TABLEFILL-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{table{.}fill}}
.. |TABLEGET-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{table{.}get}}
.. |TABLEGROW-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{table{.}grow}}
.. |TABLEINIT-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{table{.}init}}
.. |TABLESET-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{table{.}set}}
.. |TABLESIZE-instr-state| mathdef:: \xref{syntax/instructions}{syntax-instr-state}{\K{table{.}size}}

.. LABELADDR
.. ---------

.. LABELIDX
.. --------

.. LIMITS
.. ------

.. LOCALIDX
.. --------

.. MEM
.. ---
.. |MEMORY-mem| mathdef:: \xref{syntax/modules}{syntax-mem}{\K{memory}}

.. MEMADDR
.. -------

.. MEMIDX
.. ------

.. MEMINST
.. -------
.. |DATA-meminst| mathdef:: \xref{exec/runtime}{syntax-meminst}{\K{data}}
.. |TYPE-meminst| mathdef:: \xref{exec/runtime}{syntax-meminst}{\K{type}}

.. MEMTYPE
.. -------
.. |I8-memtype| mathdef:: \xref{syntax/types}{syntax-memtype}{\K{i8}}

.. MODULE
.. ------
.. |MODULE-module| mathdef:: \xref{syntax/modules}{syntax-module}{\K{module}}

.. MODULEINST
.. ----------
.. |DATA-moduleinst| mathdef:: \xref{exec/runtime}{syntax-moduleinst}{\K{data}}
.. |ELEM-moduleinst| mathdef:: \xref{exec/runtime}{syntax-moduleinst}{\K{elem}}
.. |EXPORT-moduleinst| mathdef:: \xref{exec/runtime}{syntax-moduleinst}{\K{export}}
.. |FUNC-moduleinst| mathdef:: \xref{exec/runtime}{syntax-moduleinst}{\K{func}}
.. |GLOBAL-moduleinst| mathdef:: \xref{exec/runtime}{syntax-moduleinst}{\K{global}}
.. |MEM-moduleinst| mathdef:: \xref{exec/runtime}{syntax-moduleinst}{\K{mem}}
.. |TABLE-moduleinst| mathdef:: \xref{exec/runtime}{syntax-moduleinst}{\K{table}}

.. N
.. -

.. NAME
.. ----

.. NUM
.. ---
.. |CONST-num| mathdef:: {\K{const}}

.. NUMTYPE
.. -------
.. |F32-numtype| mathdef:: \xref{syntax/types}{syntax-numtype}{\K{f32}}
.. |F64-numtype| mathdef:: \xref{syntax/types}{syntax-numtype}{\K{f64}}
.. |I32-numtype| mathdef:: \xref{syntax/types}{syntax-numtype}{\K{i32}}
.. |I64-numtype| mathdef:: \xref{syntax/types}{syntax-numtype}{\K{i64}}

.. REF
.. ---
.. |REFFUNCADDR-ref| mathdef:: {\K{ref{.}func\_addr}}
.. |REFHOSTADDR-ref| mathdef:: {\K{ref{.}host\_addr}}
.. |REFNULL-ref| mathdef:: {\K{ref{.}null}}

.. REFTYPE
.. -------
.. |EXTERNREF-reftype| mathdef:: \xref{syntax/types}{syntax-reftype}{\K{externref}}
.. |FUNCREF-reftype| mathdef:: \xref{syntax/types}{syntax-reftype}{\K{funcref}}

.. RELOP_FXX
.. ---------
.. |EQ-relopFXX| mathdef:: {\K{eq}}
.. |GE-relopFXX| mathdef:: {\K{ge}}
.. |GT-relopFXX| mathdef:: {\K{gt}}
.. |LE-relopFXX| mathdef:: {\K{le}}
.. |LT-relopFXX| mathdef:: {\K{lt}}
.. |NE-relopFXX| mathdef:: {\K{ne}}

.. RELOP_IXX
.. ---------
.. |EQ-relopIXX| mathdef:: \xref{syntax/instructions}{syntax-relop_IXX}{\K{eq}}
.. |GE-relopIXX| mathdef:: \xref{syntax/instructions}{syntax-relop_IXX}{\K{ge}}
.. |GT-relopIXX| mathdef:: \xref{syntax/instructions}{syntax-relop_IXX}{\K{gt}}
.. |LE-relopIXX| mathdef:: \xref{syntax/instructions}{syntax-relop_IXX}{\K{le}}
.. |LT-relopIXX| mathdef:: \xref{syntax/instructions}{syntax-relop_IXX}{\K{lt}}
.. |NE-relopIXX| mathdef:: \xref{syntax/instructions}{syntax-relop_IXX}{\K{ne}}

.. RELOP_NUMTYPE
.. -------------
.. |F-relopnumtype| mathdef:: \xref{syntax/instructions}{syntax-relop_numtype}{\K{\_f}}
.. |I-relopnumtype| mathdef:: \xref{syntax/instructions}{syntax-relop_numtype}{\K{\_i}}

.. RESULT
.. ------
.. |TRAP-result| mathdef:: {\K{trap}}
.. |VALS-result| mathdef:: {\K{\_vals}}

.. RESULTTYPE
.. ----------

.. START
.. -----
.. |START-start| mathdef:: \xref{syntax/modules}{syntax-start}{\K{start}}

.. STATE
.. -----

.. STORE
.. -----
.. |DATA-store| mathdef:: \xref{exec/runtime}{syntax-store}{\K{data}}
.. |ELEM-store| mathdef:: \xref{exec/runtime}{syntax-store}{\K{elem}}
.. |FUNC-store| mathdef:: \xref{exec/runtime}{syntax-store}{\K{func}}
.. |GLOBAL-store| mathdef:: \xref{exec/runtime}{syntax-store}{\K{global}}
.. |MEM-store| mathdef:: \xref{exec/runtime}{syntax-store}{\K{mem}}
.. |TABLE-store| mathdef:: \xref{exec/runtime}{syntax-store}{\K{table}}

.. SX
.. --
.. |S-sx| mathdef:: \xref{syntax/instructions}{syntax-sx}{\K{s}}
.. |U-sx| mathdef:: \xref{syntax/instructions}{syntax-sx}{\K{u}}

.. TABLE
.. -----
.. |TABLE-table| mathdef:: \xref{syntax/modules}{syntax-table}{\K{table}}

.. TABLEADDR
.. ---------

.. TABLEIDX
.. --------

.. TABLEINST
.. ---------
.. |ELEM-tableinst| mathdef:: \xref{exec/runtime}{syntax-tableinst}{\K{elem}}
.. |TYPE-tableinst| mathdef:: \xref{exec/runtime}{syntax-tableinst}{\K{type}}

.. TABLETYPE
.. ---------

.. TESTFUSE
.. --------
.. |AB-testfuse| mathdef:: {\K{ab\_}}
.. |CD-testfuse| mathdef:: {\K{cd}}
.. |EF-testfuse| mathdef:: {\K{ef}}
.. |GH-testfuse| mathdef:: {\K{gh}}
.. |IJ-testfuse| mathdef:: {\K{ij}}
.. |KL-testfuse| mathdef:: {\K{kl}}
.. |MN-testfuse| mathdef:: {\K{mn}}
.. |OP-testfuse| mathdef:: {\K{op}}
.. |QR-testfuse| mathdef:: {\K{qr}}

.. TESTOP_FXX
.. ----------

.. TESTOP_IXX
.. ----------
.. |EQZ-testopIXX| mathdef:: \xref{syntax/instructions}{syntax-testop_IXX}{\K{eqz}}

.. TESTOP_NUMTYPE
.. --------------
.. |F-testopnumtype| mathdef:: {\K{\_f}}
.. |I-testopnumtype| mathdef:: {\K{\_i}}

.. U32
.. ---

.. UNOP_FXX
.. --------
.. |ABS-unopFXX| mathdef:: \xref{syntax/instructions}{syntax-unop_FXX}{\K{abs}}
.. |CEIL-unopFXX| mathdef:: \xref{syntax/instructions}{syntax-unop_FXX}{\K{ceil}}
.. |FLOOR-unopFXX| mathdef:: \xref{syntax/instructions}{syntax-unop_FXX}{\K{floor}}
.. |NEAREST-unopFXX| mathdef:: \xref{syntax/instructions}{syntax-unop_FXX}{\K{nearest}}
.. |NEG-unopFXX| mathdef:: \xref{syntax/instructions}{syntax-unop_FXX}{\K{neg}}
.. |SQRT-unopFXX| mathdef:: \xref{syntax/instructions}{syntax-unop_FXX}{\K{sqrt}}
.. |TRUNC-unopFXX| mathdef:: \xref{syntax/instructions}{syntax-unop_FXX}{\K{trunc}}

.. UNOP_IXX
.. --------
.. |CLZ-unopIXX| mathdef:: \xref{syntax/instructions}{syntax-unop_IXX}{\K{clz}}
.. |CTZ-unopIXX| mathdef:: \xref{syntax/instructions}{syntax-unop_IXX}{\K{ctz}}
.. |POPCNT-unopIXX| mathdef:: \xref{syntax/instructions}{syntax-unop_IXX}{\K{popcnt}}

.. UNOP_NUMTYPE
.. ------------
.. |F-unopnumtype| mathdef:: \xref{syntax/instructions}{syntax-unop_numtype}{\K{\_f}}
.. |I-unopnumtype| mathdef:: \xref{syntax/instructions}{syntax-unop_numtype}{\K{\_i}}

.. VAL
.. ---

.. VALTYPE
.. -------
.. |BOT-valtype| mathdef:: \xref{syntax/types}{syntax-valtype}{\K{bot}}

.. VECTYPE
.. -------
.. |V128-vectype| mathdef:: \xref{syntax/types}{syntax-vectype}{\K{v128}}

.. Functions
.. ---------

.. |Ki-| mathdef:: \xref{exec/auxiliary}{def-Ki}{\F{Ki}}
.. |allocdata-| mathdef:: \xref{exec/modules}{def-allocdata}{\F{allocdata}}
.. |allocdatas-| mathdef:: \xref{exec/modules}{def-allocdatas}{\F{allocdatas}}
.. |allocelem-| mathdef:: \xref{exec/modules}{def-allocelem}{\F{allocelem}}
.. |allocelems-| mathdef:: \xref{exec/modules}{def-allocelems}{\F{allocelems}}
.. |allocfunc-| mathdef:: \xref{exec/modules}{def-allocfunc}{\F{allocfunc}}
.. |allocfuncs-| mathdef:: \xref{exec/modules}{def-allocfuncs}{\F{allocfuncs}}
.. |allocglobal-| mathdef:: \xref{exec/modules}{def-allocglobal}{\F{allocglobal}}
.. |allocglobals-| mathdef:: \xref{exec/modules}{def-allocglobals}{\F{allocglobals}}
.. |allocmem-| mathdef:: \xref{exec/modules}{def-allocmem}{\F{allocmem}}
.. |allocmems-| mathdef:: \xref{exec/modules}{def-allocmems}{\F{allocmems}}
.. |allocmodule-| mathdef:: \xref{exec/modules}{def-allocmodule}{\F{allocmodule}}
.. |alloctable-| mathdef:: \xref{exec/modules}{def-alloctable}{\F{alloctable}}
.. |alloctables-| mathdef:: \xref{exec/modules}{def-alloctables}{\F{alloctables}}
.. |binop-| mathdef:: {\F{binop}}
.. |bytes-| mathdef:: {\F{bytes\_}}
.. |concatinstr-| mathdef:: \xref{exec/modules}{def-concat_instr}{\F{concat\_instr}}
.. |curried-| mathdef:: {\F{curried\_}}
.. |cvtop-| mathdef:: {\F{cvtop}}
.. |data-| mathdef:: \xref{exec/runtime}{def-data}{\F{data}}
.. |datainst-| mathdef:: \xref{exec/runtime}{def-datainst}{\F{datainst}}
.. |default-| mathdef:: \xref{exec/runtime}{def-default_}{\F{default\_}}
.. |elem-| mathdef:: \xref{exec/runtime}{def-elem}{\F{elem}}
.. |eleminst-| mathdef:: \xref{exec/runtime}{def-eleminst}{\F{eleminst}}
.. |ext-| mathdef:: {\F{ext}}
.. |func-| mathdef:: \xref{exec/runtime}{def-func}{\F{func}}
.. |funcaddr-| mathdef:: \xref{exec/runtime}{def-funcaddr}{\F{funcaddr}}
.. |funcinst-| mathdef:: \xref{exec/runtime}{def-funcinst}{\F{funcinst}}
.. |funcs-| mathdef:: \xref{exec/modules}{def-funcs}{\F{funcs}}
.. |global-| mathdef:: \xref{exec/runtime}{def-global}{\F{global}}
.. |globalinst-| mathdef:: \xref{exec/runtime}{def-globalinst}{\F{globalinst}}
.. |globals-| mathdef:: \xref{exec/modules}{def-globals}{\F{globals}}
.. |growmemory-| mathdef:: \xref{exec/runtime}{def-grow_memory}{\F{grow\_memory}}
.. |growtable-| mathdef:: \xref{exec/runtime}{def-grow_table}{\F{grow\_table}}
.. |instantiation-| mathdef:: \xref{exec/modules}{def-instantiation}{\F{instantiation}}
.. |instexport-| mathdef:: \xref{exec/modules}{def-instexport}{\F{instexport}}
.. |invocation-| mathdef:: \xref{exec/modules}{def-invocation}{\F{invocation}}
.. |local-| mathdef:: \xref{exec/runtime}{def-local}{\F{local}}
.. |mem-| mathdef:: \xref{exec/runtime}{def-mem}{\F{mem}}
.. |meminst-| mathdef:: \xref{exec/runtime}{def-meminst}{\F{meminst}}
.. |mems-| mathdef:: \xref{exec/modules}{def-mems}{\F{mems}}
.. |min-| mathdef:: \xref{exec/auxiliary}{def-min}{\F{min}}
.. |relop-| mathdef:: {\F{relop}}
.. |rundata-| mathdef:: {\F{rundata}}
.. |runelem-| mathdef:: {\F{runelem}}
.. |size-| mathdef:: \xref{exec/auxiliary}{def-size}{\F{size}}
.. |table-| mathdef:: \xref{exec/runtime}{def-table}{\F{table}}
.. |tableinst-| mathdef:: \xref{exec/runtime}{def-tableinst}{\F{tableinst}}
.. |tables-| mathdef:: \xref{exec/modules}{def-tables}{\F{tables}}
.. |testsubATOM22-| mathdef:: {\F{test\_sub\_ATOM\_22}}
.. |testop-| mathdef:: {\F{testop}}
.. |unop-| mathdef:: {\F{unop}}
.. |withdata-| mathdef:: \xref{exec/runtime}{def-with_data}{\F{with\_data}}
.. |withelem-| mathdef:: \xref{exec/runtime}{def-with_elem}{\F{with\_elem}}
.. |withglobal-| mathdef:: \xref{exec/runtime}{def-with_global}{\F{with\_global}}
.. |withlocal-| mathdef:: \xref{exec/runtime}{def-with_local}{\F{with\_local}}
.. |withmem-| mathdef:: \xref{exec/runtime}{def-with_mem}{\F{with\_mem}}
.. |withmeminst-| mathdef:: \xref{exec/runtime}{def-with_meminst}{\F{with\_meminst}}
.. |withtable-| mathdef:: \xref{exec/runtime}{def-with_table}{\F{with\_table}}
.. |withtableinst-| mathdef:: \xref{exec/runtime}{def-with_tableinst}{\F{with\_tableinst}}
.. |wrap-| mathdef:: {\F{wrap\_}}
